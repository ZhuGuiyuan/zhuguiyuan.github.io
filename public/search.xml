<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CCF-CSP认证 202012-2 期末预测之最佳阈值</title>
      <link href="/20210620/CCF-CSP%E8%AE%A4%E8%AF%81%20202012-2%20%E6%9C%9F%E6%9C%AB%E9%A2%84%E6%B5%8B%E4%B9%8B%E6%9C%80%E4%BD%B3%E9%98%88%E5%80%BC/"/>
      <url>/20210620/CCF-CSP%E8%AE%A4%E8%AF%81%20202012-2%20%E6%9C%9F%E6%9C%AB%E9%A2%84%E6%B5%8B%E4%B9%8B%E6%9C%80%E4%BD%B3%E9%98%88%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>思路写在注释里面了。《算法笔记》P147页，活用递推章节语：“很多题目需要细心考虑过程中是否存在可能的递推关系，如果能找到这样的递推关系，就能使时间复杂度下降不少。例如就一类涉及序列的题目来说，假如序列每一位所需要计算的值都可以通过该位左右两侧的计算结果得到，那么就可以考虑所谓的‘左右两侧的结果’是否能够通过递推进行预处理来得到，这样在后面的使用中就可以不必反复求解。”</p><p>PAT B1040/A1093也是这个思路。<br><img src="https://img-blog.csdnimg.cn/20210308173654174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE5MTc3NDU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210308173749391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE5MTc3NDU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210308173804333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE5MTc3NDU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> y_&#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> result_&#123; <span class="number">0</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Student &amp;lhs, <span class="keyword">const</span> Student &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lhs.y_ != rhs.y_) <span class="keyword">return</span> lhs.y_ &lt; rhs.y_;</span><br><span class="line">    <span class="keyword">return</span> lhs.result_ &lt; rhs.result_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThreeElementArr</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> y_&#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> pass_lower_than_y_&#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> fail_higher_than_y_&#123; <span class="number">0</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> m; cin &gt;&gt; m; <span class="function">vector&lt;Student&gt; <span class="title">student_set</span><span class="params">(m)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; student_set[i].y_ &gt;&gt; student_set[i].result_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据y，m个人形成一个排序，把m个人划分成rank+1个类（相同的y在相同的类）(rank&lt;m,从0开始)。</span></span><br><span class="line">    <span class="comment">// 维护一个大小为rank+1的数组，数组元素为三元组，</span></span><br><span class="line">    <span class="comment">// 三元组的构成为：&#123;这个rank的y，这个rank之前有多少人过了，这个rank之后有多少人没过&#125;;</span></span><br><span class="line">    <span class="comment">// 从前向后扫描一次排好序的student_set获得第二个元，从后向前获得第三个元，时间复杂度O(2N).</span></span><br><span class="line">    <span class="comment">// 再扫描一遍这个数组，第二个元和第三个元加和结果最小的元素的y就是阈值y.</span></span><br><span class="line">    <span class="built_in">sort</span>(student_set.<span class="built_in">begin</span>(), student_set.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="function">vector&lt;ThreeElementArr&gt; <span class="title">rank_arr</span><span class="params">(m)</span></span>;</span><br><span class="line">    <span class="comment">// 第二个元，即小于此分数的人中有多少人没过。</span></span><br><span class="line">    <span class="keyword">int</span> pass_lower_than_y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rank = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            rank_arr[rank].y_ = student_set[i].y_;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; student_set[i].y_ != student_set[i - <span class="number">1</span>].y_) &#123;</span><br><span class="line">            ++rank;</span><br><span class="line">            rank_arr[rank].y_ = student_set[i].y_;</span><br><span class="line">            rank_arr[rank].pass_lower_than_y_ = pass_lower_than_y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (student_set[i].result_ == <span class="number">1</span>) &#123;</span><br><span class="line">            ++pass_lower_than_y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第三个元，也就是分数大于等于此分数的人中有多少人没有过。</span></span><br><span class="line">    <span class="keyword">int</span> rrank = rank;</span><br><span class="line">    <span class="keyword">int</span> fail_higher_tan_y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != m - <span class="number">1</span> &amp;&amp; student_set[i].y_ != student_set[i + <span class="number">1</span>].y_) &#123;</span><br><span class="line">            --rrank;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (student_set[i].result_ == <span class="number">0</span>) &#123;</span><br><span class="line">            ++fail_higher_tan_y;</span><br><span class="line">        &#125;</span><br><span class="line">        rank_arr[rrank].fail_higher_than_y_ = fail_higher_tan_y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 寻找和最小的元素的y</span></span><br><span class="line">    <span class="keyword">int</span> min=<span class="number">999999999</span>; <span class="keyword">int</span> min_idx;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = rank; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rank_arr[i].fail_higher_than_y_ + rank_arr[i].pass_lower_than_y_ &lt; min) &#123;</span><br><span class="line">            min = rank_arr[i].fail_higher_than_y_ + rank_arr[i].pass_lower_than_y_;</span><br><span class="line">            min_idx = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; rank_arr[min_idx].y_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AcWing 2~12题 背包问题专题</title>
      <link href="/20210620/AcWing%202~12%E9%A2%98%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E4%B8%93%E9%A2%98/"/>
      <url>/20210620/AcWing%202~12%E9%A2%98%20%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-2、3：01背包和完全背包"><a href="#AcWing-2、3：01背包和完全背包" class="headerlink" title="AcWing 2、3：01背包和完全背包"></a>AcWing 2、3：01背包和完全背包</h2><p>参考了<a href="https://www.acwing.com/solution/content/5345/">Aniway的题解</a>。<br>这两道背包问题对比起来看，01背包压缩到一维dp上，对矩阵的复用思路真是太牛了。从大体积开始遍历就成了01背包，从小体积开始遍历就成了完全背包，简直不要太妙。</p><ol start="2"><li><a href="https://www.acwing.com/problem/content/2/">01背包问题</a></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kN=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> v[kN],w[kN];</span><br><span class="line"><span class="keyword">int</span> dp[kN];</span><br><span class="line"><span class="keyword">int</span> N,V;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=V;j&gt;=v[i];--j)&#123;</span><br><span class="line">            dp[j]=<span class="built_in">max</span>(dp[j-v[i]]+w[i],dp[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[V];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="comment">//    freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    cin&gt;&gt;N&gt;&gt;V;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">        cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">DP</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><a href="https://www.acwing.com/problem/content/description/3/">完全背包问题</a></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kN=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> v[kN],w[kN];</span><br><span class="line"><span class="keyword">int</span> dp[kN];</span><br><span class="line"><span class="keyword">int</span> N,V;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=v[i];j&lt;=V;++j)&#123;</span><br><span class="line">            dp[j]=<span class="built_in">max</span>(dp[j-v[i]]+w[i],dp[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[V];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="comment">//    freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    cin&gt;&gt;N&gt;&gt;V;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">        cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">DP</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，一个巧妙的DFS剪枝，N等于100的时候大概6s。详细见<a href="https://blog.csdn.net/u011917745/article/details/117575272">这篇文章</a>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Item</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> w, v;</span><br><span class="line">&#125;vec[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> suf_w[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, V;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> max_w = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> w_now, <span class="keyword">int</span> v_remain)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    max_w = <span class="built_in">max</span>(max_w, w_now);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= N) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (w_now + suf_w[i] &lt;= max_w) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (vec[i].v &lt;= v_remain) &#123;</span><br><span class="line">        <span class="built_in">DFS</span>(i + <span class="number">1</span>, w_now + vec[i].w, v_remain - vec[i].v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">DFS</span>(i + <span class="number">1</span>, w_now, v_remain);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 排序 ,高价值的在前面 </span></span><br><span class="line">    <span class="built_in">sort</span>(vec, vec + N, [](Item&amp; a, Item&amp; b) &#123;<span class="keyword">return</span> a.w &gt; b.w; &#125;);</span><br><span class="line">    <span class="comment">// 后缀和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == N - <span class="number">1</span>) suf_w[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            suf_w[i] = vec[i + <span class="number">1</span>].w + suf_w[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">DFS</span>(<span class="number">0</span>, <span class="number">0</span>, V);</span><br><span class="line">    cout &lt;&lt; max_w &lt;&lt; endl;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    cin &gt;&gt; N &gt;&gt; V;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; vec[i].v &gt;&gt; vec[i].w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AcWing-4、5、6：多重背包，二进制优化和单调队列优化"><a href="#AcWing-4、5、6：多重背包，二进制优化和单调队列优化" class="headerlink" title="AcWing 4、5、6：多重背包，二进制优化和单调队列优化"></a>AcWing 4、5、6：多重背包，二进制优化和单调队列优化</h2><ol start="4"><li><a href="https://www.acwing.com/problem/content/4/">多重背包问题 I</a></li></ol><p>快乐压行，本质是拆成01背包。可以根据输入规模计算一下时间，小规模是OK的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> N,V,v,w,s,dp[<span class="number">2010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;V;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123; <span class="comment">// 遍历物品种类</span></span><br><span class="line">        cin&gt;&gt;v&gt;&gt;w&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;s;++k) <span class="comment">// 遍历一种物品的个数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=V;j&gt;=v;--j) <span class="comment">// 遍历背包体积</span></span><br><span class="line">                dp[j]=<span class="built_in">max</span>(dp[j],dp[j-v]+w);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[V];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><a href="https://www.acwing.com/problem/content/5/">多重背包问题 II</a></li></ol><p>这道题考察上面代码的二进制优化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> N,V,v,w,s,dp[<span class="number">2010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;V;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123; <span class="comment">// 遍历物品种类</span></span><br><span class="line">        cin&gt;&gt;v&gt;&gt;w&gt;&gt;s;</span><br><span class="line">        s=<span class="built_in">min</span>(s,V/v);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;s&gt;<span class="number">0</span>;k&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">// 把s拆分成体积和价值为1,2,4,...,2^m,s-2^m倍的物品</span></span><br><span class="line">            <span class="keyword">if</span>(k&gt;s) k=s;</span><br><span class="line">            s-=k;<span class="keyword">int</span> v_now=k*v,w_now=k*w;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=V;j&gt;=v*k;--j) <span class="comment">// 遍历背包体积</span></span><br><span class="line">            <span class="comment">// 如果是单调队列的题要用二进制优化卡常的话，不能写成 p[j]=max(dp[j],dp[j-k*v]+k*w);</span></span><br><span class="line">            <span class="comment">// 上面这句max非常慢！似乎是编译器做了一些缓存操作导致的？或者是每次都要调用max？</span></span><br><span class="line">            <span class="comment">// 用三目运算符也可以，好像和分支预测有关系，涉及到一些关于CPU的知识，CSAPP上应该有讲述。</span></span><br><span class="line">            <span class="comment">// 另外，不要重复计算k*v和k*w，在外层循环算好再放进来也可以优化一点常数</span></span><br><span class="line">            <span class="comment">// 当然，还可以加上火车头 #pragma GCC optimize(1)</span></span><br><span class="line">            <span class="comment">// 经过测试，相比于O2、O3优化，O1优化是最快的</span></span><br><span class="line">            <span class="keyword">if</span>(dp[j-v_now]+w_now&gt;dp[j]) dp[j]=dp[j-v_now]+w_now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[V];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1002 A+B for Polynomials</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201002%20A+B%20for%20Polynomials/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201002%20A+B%20for%20Polynomials/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1002-A-B-for-Polynomials"><a href="#PAT-甲级-1002-A-B-for-Polynomials" class="headerlink" title="PAT 甲级 1002 A+B for Polynomials"></a>PAT 甲级 1002 A+B for Polynomials</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">double</span> coefficients_per_exponents[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            <span class="keyword">int</span> x; <span class="keyword">double</span> y; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            coefficients_per_exponents[x] += y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ctr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1010</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(coefficients_per_exponents[i]) &gt; <span class="number">1e-6</span>) ++ctr;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ctr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1010</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(coefficients_per_exponents[i])&gt;<span class="number">1e-6</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %d %.1f&quot;</span>, i, coefficients_per_exponents[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1001 A+B Format</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201001%20A+B%20Format/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201001%20A+B%20Format/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1001-A-B-Format"><a href="#PAT-甲级-1001-A-B-Format" class="headerlink" title="PAT 甲级 1001 A+B Format"></a>PAT 甲级 1001 A+B Format</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> a, b; cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    string ans = <span class="built_in">to_string</span>(<span class="built_in">abs</span>(a + b));</span><br><span class="line">    <span class="keyword">if</span> (a + b &lt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">        <span class="keyword">if</span> ((ans.<span class="built_in">size</span>() - <span class="number">1</span> - i) % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i != ans.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1006 Sign In and Sign Out</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201006%20Sign%20In%20and%20Sign%20Out/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201006%20Sign%20In%20and%20Sign%20Out/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1006-Sign-In-and-Sign-Out"><a href="#PAT-甲级-1006-Sign-In-and-Sign-Out" class="headerlink" title="PAT 甲级 1006 Sign In and Sign Out"></a>PAT 甲级 1006 Sign In and Sign Out</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> sign_in_time&#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> sign_out_time&#123; <span class="number">0</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n; <span class="function">vector&lt;Student&gt; <span class="title">student_set</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> first_sign_in_time = <span class="number">9999999</span>, last_sign_out_time = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> first_sign_in_id, last_sign_out_id;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> hh, mm, ss;</span><br><span class="line">        cin &gt;&gt; student_set[i].name;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d:%d:%d&quot;</span>, &amp;hh, &amp;mm, &amp;ss);</span><br><span class="line">        student_set[i].sign_in_time = hh * <span class="number">10000</span> + mm * <span class="number">100</span> + ss;</span><br><span class="line">        <span class="keyword">if</span> (student_set[i].sign_in_time &lt; first_sign_in_time) &#123;</span><br><span class="line">            first_sign_in_id = i;</span><br><span class="line">            first_sign_in_time = student_set[i].sign_in_time;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d:%d:%d&quot;</span>, &amp;hh, &amp;mm, &amp;ss);</span><br><span class="line">        student_set[i].sign_out_time = hh * <span class="number">10000</span> + mm * <span class="number">100</span> + ss;</span><br><span class="line">        <span class="keyword">if</span> (student_set[i].sign_out_time &gt; last_sign_out_time) &#123;</span><br><span class="line">            last_sign_out_id = i;</span><br><span class="line">            last_sign_out_time = student_set[i].sign_out_time;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; student_set[first_sign_in_id].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; student_set[last_sign_out_id].name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1009 Product of Polynomials</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201009%20Product%20of%20Polynomials/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201009%20Product%20of%20Polynomials/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1009-Product-of-Polynomials"><a href="#PAT-甲级-1009-Product-of-Polynomials" class="headerlink" title="PAT 甲级 1009 Product of Polynomials"></a>PAT 甲级 1009 Product of Polynomials</h2><p>注意数组开大一点，不然乘法可能段错误</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; polynomial[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">double</span> polynomial_ans[<span class="number">2020</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            <span class="keyword">int</span> x; <span class="keyword">double</span> y; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            polynomial[i][x] = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : polynomial[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j : polynomial[<span class="number">1</span>]) &#123;</span><br><span class="line">            polynomial_ans[i.first + j.first] += i.second*j.second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ctr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2020</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(polynomial_ans[i]) &gt; <span class="number">1e-6</span>) ++ctr;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ctr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2020</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(polynomial_ans[i]) &gt; <span class="number">1e-6</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %d %.1f&quot;</span>, i, polynomial_ans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1008 Elevator</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201008%20Elevator/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201008%20Elevator/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1008-Elevator"><a href="#PAT-甲级-1008-Elevator" class="headerlink" title="PAT 甲级 1008 Elevator"></a>PAT 甲级 1008 Elevator</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, next_floor = <span class="number">0</span>, now_floor = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; next_floor;</span><br><span class="line">        <span class="keyword">if</span> (next_floor &gt;= now_floor)</span><br><span class="line">            ans += <span class="number">6</span> * (next_floor - now_floor) + <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans += <span class="number">4</span> * (now_floor - next_floor) + <span class="number">5</span>;</span><br><span class="line">        now_floor = next_floor;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1011 World Cup Betting</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201011%20World%20Cup%20Betting/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201011%20World%20Cup%20Betting/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1011-World-Cup-Betting"><a href="#PAT-甲级-1011-World-Cup-Betting" class="headerlink" title="PAT 甲级 1011 World Cup Betting"></a>PAT 甲级 1011 World Cup Betting</h2><p>简单模拟</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">double</span> W, T, L, ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; W &gt;&gt; T &gt;&gt; L;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (W - T &gt; <span class="number">1e-6</span>&amp;&amp;W - L &gt; <span class="number">1e-6</span>) &#123; cout &lt;&lt; <span class="string">&quot;W&quot;</span>; ans *= W; &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (T - W &gt; <span class="number">1e-6</span>&amp;&amp;T - L &gt; <span class="number">1e-6</span>) &#123; cout &lt;&lt; <span class="string">&quot;T&quot;</span>; ans *= T; &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (L - T &gt; <span class="number">1e-6</span>&amp;&amp;L - W &gt; <span class="number">1e-6</span>) &#123; cout &lt;&lt; <span class="string">&quot;L&quot;</span>; ans *= L; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; %.2f&quot;</span>, ans*<span class="number">0.65</span> * <span class="number">2</span> - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1012 The Best Rank</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201012%20The%20Best%20Rank/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201012%20The%20Best%20Rank/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1012-The-Best-Rank"><a href="#PAT-甲级-1012-The-Best-Rank" class="headerlink" title="PAT 甲级 1012 The Best Rank"></a>PAT 甲级 1012 The Best Rank</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">    string student_id_;</span><br><span class="line">    <span class="keyword">int</span> scores_acme_[<span class="number">4</span>]&#123; <span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> rank_acme_[<span class="number">4</span>]&#123; <span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span> &#125;;</span><br><span class="line">    <span class="keyword">char</span> rank_type_&#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> best_rank_&#123; <span class="number">-1</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> sort_position = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Student &amp;lhs, <span class="keyword">const</span> Student &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.scores_acme_[sort_position] &gt; rhs.scores_acme_[sort_position];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">//input</span></span><br><span class="line">    <span class="keyword">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;Student&gt; <span class="title">student_set</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : student_set) &#123;</span><br><span class="line">        cin &gt;&gt; i.student_id_ &gt;&gt; i.scores_acme_[<span class="number">1</span>] &gt;&gt; i.scores_acme_[<span class="number">2</span>] &gt;&gt; i.scores_acme_[<span class="number">3</span>];</span><br><span class="line">        i.scores_acme_[<span class="number">0</span>] = (i.scores_acme_[<span class="number">1</span>] + i.scores_acme_[<span class="number">2</span>] + i.scores_acme_[<span class="number">3</span>]) / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//sorts and gets rank_acme_.</span></span><br><span class="line">    <span class="keyword">for</span> (sort_position = <span class="number">0</span>; sort_position &lt; <span class="number">4</span>; ++sort_position) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(student_set.<span class="built_in">begin</span>(), student_set.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="comment">//n=student_set.size();</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; student_set[i - <span class="number">1</span>].scores_acme_[sort_position]</span><br><span class="line">                == student_set[i].scores_acme_[sort_position]) &#123;</span><br><span class="line">                student_set[i].rank_acme_[sort_position] = student_set[i - <span class="number">1</span>].rank_acme_[sort_position];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                student_set[i].rank_acme_[sort_position] = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//gets rank_type.</span></span><br><span class="line">    <span class="comment">//and builds hash_table for checking.</span></span><br><span class="line">    map &lt;string, Student*&gt; hash_table;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : student_set) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = i.rank_acme_[<span class="number">0</span>], c = i.rank_acme_[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> m = i.rank_acme_[<span class="number">2</span>], e = i.rank_acme_[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">if</span> (a &lt;= c &amp;&amp; a &lt;= m &amp;&amp; a &lt;= e) &#123; i.rank_type_ = <span class="string">&#x27;A&#x27;</span>; i.best_rank_ = a; &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c &lt;= a &amp;&amp; c &lt;= m &amp;&amp; c &lt;= e) &#123; i.rank_type_ = <span class="string">&#x27;C&#x27;</span>; i.best_rank_ = c; &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (m &lt;= a &amp;&amp; m &lt;= c &amp;&amp; m &lt;= e)&#123;i.rank_type_ = <span class="string">&#x27;M&#x27;</span>;i.best_rank_ = m; &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e &lt;= a &amp;&amp; e &lt;= c &amp;&amp; e &lt;= m)&#123;i.rank_type_ = <span class="string">&#x27;E&#x27;</span>;i.best_rank_ = e; &#125;</span><br><span class="line">        hash_table[i.student_id_] = &amp;i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//checks</span></span><br><span class="line">    string check_id;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        cin &gt;&gt; check_id;</span><br><span class="line">        <span class="keyword">if</span> (hash_table[check_id] == <span class="literal">nullptr</span>) cout &lt;&lt; <span class="string">&quot;N/A&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; hash_table[check_id]-&gt;best_rank_ &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">            &lt;&lt; hash_table[check_id]-&gt;rank_type_ &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1015 Reversible Primes</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201015%20Reversible%20Primes/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201015%20Reversible%20Primes/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1015-Reversible-Primes"><a href="#PAT-甲级-1015-Reversible-Primes" class="headerlink" title="PAT 甲级 1015 Reversible Primes"></a>PAT 甲级 1015 Reversible Primes</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kPRIME_SIZE = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">bool</span> is_prime[kPRIME_SIZE];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">re_D</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> D)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; n_D;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 转换进制后翻转</span></span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        n_D.<span class="built_in">push_back</span>(n % D);</span><br><span class="line">        n /= D;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 转换回十进制</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n_D.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        ans = ans * D + n_D[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">memset</span>(is_prime, <span class="literal">true</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(is_prime));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; kPRIME_SIZE; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_prime[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i * <span class="number">2</span>; j &lt; kPRIME_SIZE; j += i) &#123;</span><br><span class="line">                is_prime[j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    is_prime[<span class="number">0</span>] = <span class="literal">false</span>, is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> n, D;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; D, n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> n_r = <span class="built_in">re_D</span>(n, D);</span><br><span class="line">        <span class="keyword">if</span> (is_prime[n] &amp;&amp; is_prime[n_r])</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1005 Spell It Right</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201005%20Spell%20It%20Right/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201005%20Spell%20It%20Right/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1005-Spell-It-Right"><a href="#PAT-甲级-1005-Spell-It-Right" class="headerlink" title="PAT 甲级 1005 Spell It Right"></a>PAT 甲级 1005 Spell It Right</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string english_of_num[<span class="number">10</span>] = &#123;</span><br><span class="line">    <span class="string">&quot;zero&quot;</span>,<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>,<span class="string">&quot;three&quot;</span>,<span class="string">&quot;four&quot;</span>,<span class="string">&quot;five&quot;</span>,<span class="string">&quot;six&quot;</span>,<span class="string">&quot;seven&quot;</span>,<span class="string">&quot;eight&quot;</span>,<span class="string">&quot;nine&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="keyword">int</span> each_digital;</span><br><span class="line">    <span class="keyword">while</span> (each_digital = <span class="built_in">getchar</span>(), each_digital != EOF &amp;&amp; each_digital != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">        sum += each_digital - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    string sum_string = <span class="built_in">to_string</span>(sum);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sum_string.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; english_of_num[sum_string[i] - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1016 Phone Bills</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201016%20Phone%20Bills/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201016%20Phone%20Bills/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1016-Phone-Bills"><a href="#PAT-甲级-1016-Phone-Bills" class="headerlink" title="PAT 甲级 1016 Phone Bills"></a>PAT 甲级 1016 Phone Bills</h2><p>写了挺长时间的，代码看起来比较混乱。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">money_each_hour</span><span class="params">(<span class="number">24</span>)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Record</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name_;</span><br><span class="line">    <span class="keyword">int</span> MM_;</span><br><span class="line">    <span class="keyword">int</span> dd_;</span><br><span class="line">    <span class="keyword">int</span> hh_;</span><br><span class="line">    <span class="keyword">int</span> mm_;</span><br><span class="line">    string status_;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// TODO(@Envirian): 由于sort之后的排序和Customer类中customer_record_的序是一样的，</span></span><br><span class="line"><span class="comment">// 所以可以不用Customer类再储存一遍</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Customer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name_;</span><br><span class="line">    vector&lt;Record&gt; customer_record_;</span><br><span class="line">&#125;;</span><br><span class="line">map&lt;string, Customer&gt; customer_set;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Record &amp;lhs, <span class="keyword">const</span> Record &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lhs.name_ != rhs.name_) <span class="keyword">return</span> lhs.name_ &lt; rhs.name_;</span><br><span class="line">    <span class="keyword">if</span> (lhs.dd_ != rhs.dd_) <span class="keyword">return</span> lhs.dd_ &lt; rhs.dd_;</span><br><span class="line">    <span class="keyword">if</span> (lhs.hh_ != rhs.hh_) <span class="keyword">return</span> lhs.hh_ &lt; rhs.hh_;</span><br><span class="line">    <span class="keyword">if</span> (lhs.mm_ != rhs.mm_)<span class="keyword">return</span> lhs.mm_ &lt; rhs.mm_;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO(@Envirian): 修改HowMuchCost使能同时计算time和cost，用传引用得到这两个值，返回值修改为void</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">HowMuchCost</span><span class="params">(Record lhs, <span class="keyword">int</span> time_record_pair_cost)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">//每小时费用.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : money_each_hour) cin &gt;&gt; i;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;Record&gt; <span class="title">record_set</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : record_set) &#123;</span><br><span class="line">        cin &gt;&gt; i.name_; <span class="built_in">scanf</span>(<span class="string">&quot;%d:%d:%d:%d&quot;</span>, &amp;i.MM_, &amp;i.dd_, &amp;i.hh_, &amp;i.mm_);</span><br><span class="line">        cin &gt;&gt; i.status_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序,每个Record字段依次升序.</span></span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">begin</span>(record_set), <span class="built_in">end</span>(record_set), cmp);</span><br><span class="line">    <span class="comment">//每个用户的Record存入它的Customer类中，所有用户整体储存在customer_set中.</span></span><br><span class="line">    string name_in_process = record_set[<span class="number">0</span>].name_;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; record_set.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        string name = record_set[i].name_; <span class="keyword">int</span> this_name_begin_position = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//找到一个off-line后检查前面一个位置是否是on-line，</span></span><br><span class="line">        <span class="comment">//如果是，两个位置的Record都加入Customer的customer_record_中.</span></span><br><span class="line">        <span class="keyword">if</span> (name == name_in_process) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i - this_name_begin_position != <span class="number">0</span> &amp;&amp; record_set[i].status_ == <span class="string">&quot;off-line&quot;</span></span><br><span class="line">                &amp;&amp;record_set[i - <span class="number">1</span>].status_ == <span class="string">&quot;on-line&quot;</span>) &#123;</span><br><span class="line">                customer_set[name].name_ = name;</span><br><span class="line">                customer_set[name].customer_record_.<span class="built_in">push_back</span>(record_set[i - <span class="number">1</span>]);</span><br><span class="line">                customer_set[name].customer_record_.<span class="built_in">push_back</span>(record_set[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//开始一个新用户.</span></span><br><span class="line">            name_in_process = name;</span><br><span class="line">            this_name_begin_position = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出并计算用时和花费</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : customer_set) &#123;</span><br><span class="line">        cout &lt;&lt; i.second.name_ &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02d\n&quot;</span>, i.second.customer_record_[<span class="number">0</span>].MM_);</span><br><span class="line">        <span class="keyword">double</span> total_cost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i.second.customer_record_.<span class="built_in">size</span>(); ++k) &#123;</span><br><span class="line">            <span class="keyword">auto</span> this_record = i.second.customer_record_[k];</span><br><span class="line">            <span class="keyword">if</span> (this_record.status_ == <span class="string">&quot;on-line&quot;</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d &quot;</span>, this_record.dd_, this_record.hh_, this_record.mm_);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (this_record.status_ == <span class="string">&quot;off-line&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">auto</span> pre_record = i.second.customer_record_[k - <span class="number">1</span>];</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d &quot;</span>, this_record.dd_, this_record.hh_, this_record.mm_);</span><br><span class="line">                <span class="keyword">int</span> time_record_pair_cost = ((this_record.dd_ * <span class="number">24</span> * <span class="number">60</span> + this_record.hh_ * <span class="number">60</span> + this_record.mm_) -</span><br><span class="line">                    (pre_record.dd_ * <span class="number">24</span> * <span class="number">60</span> + pre_record.hh_ * <span class="number">60</span> + pre_record.mm_));</span><br><span class="line">                cout &lt;&lt; time_record_pair_cost &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="keyword">double</span> this_cost=<span class="number">0</span>;</span><br><span class="line">                <span class="comment">//计算this_cost;</span></span><br><span class="line">                this_cost = <span class="built_in">HowMuchCost</span>(pre_record, time_record_pair_cost);</span><br><span class="line">                <span class="comment">//输出</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;$%.2f\n&quot;</span>, this_cost);</span><br><span class="line">                total_cost += this_cost;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Total amount: $%.2f\n&quot;</span>, total_cost);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">HowMuchCost</span><span class="params">(Record lhs, <span class="keyword">int</span> time_record_pair_cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (time_record_pair_cost + lhs.mm_ &lt;= <span class="number">60</span>) &#123;</span><br><span class="line">        cost += time_record_pair_cost * money_each_hour[lhs.hh_];</span><br><span class="line">        <span class="keyword">return</span> cost / <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cost += (<span class="number">60</span> - lhs.mm_) * money_each_hour[lhs.hh_];</span><br><span class="line">        time_record_pair_cost -= (<span class="number">60</span> - lhs.mm_);</span><br><span class="line">        lhs.mm_ = <span class="number">0</span>;</span><br><span class="line">        lhs.hh_++;</span><br><span class="line">        <span class="comment">//这里没有进位，之后关于hh的计算都要取余了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (time_record_pair_cost &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        cost += <span class="number">60</span> * money_each_hour[lhs.hh_ % <span class="number">24</span>];</span><br><span class="line">        time_record_pair_cost -= <span class="number">60</span>;</span><br><span class="line">        lhs.hh_++;</span><br><span class="line">    &#125;</span><br><span class="line">    cost += time_record_pair_cost * money_each_hour[lhs.hh_ % <span class="number">24</span>];</span><br><span class="line">    <span class="keyword">return</span> cost / <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1019 General Palindromic Number</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201019%20General%20Palindromic%20Number/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201019%20General%20Palindromic%20Number/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1019-General-Palindromic-Number"><a href="#PAT-甲级-1019-General-Palindromic-Number" class="headerlink" title="PAT 甲级 1019 General Palindromic Number"></a>PAT 甲级 1019 General Palindromic Number</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> N_10; <span class="keyword">int</span> base; cin &gt;&gt; N_10 &gt;&gt; base;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; N_base;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        N_base.<span class="built_in">push_back</span>(N_10 % base);</span><br><span class="line">        N_10 /= base;</span><br><span class="line">    &#125; <span class="keyword">while</span> (N_10 != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">bool</span> is_palindromic = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> N_base_size = N_base.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N_base_size / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (N_base[i] != N_base[N_base_size - <span class="number">1</span> - i]) &#123;</span><br><span class="line">            is_palindromic = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (is_palindromic ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N_base_size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != N_base_size - <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; N_base[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1010 Radix</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201010%20Radix/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201010%20Radix/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1010-Radix"><a href="#PAT-甲级-1010-Radix" class="headerlink" title="PAT 甲级 1010 Radix"></a>PAT 甲级 1010 Radix</h2><p><del>这道题还没AC，先记录一下，二分哪里写错了，测试点十还没过。</del><br>更新：AC了，测试点十的问题是beg和end爆int，改成long long就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 0~9映射为0~9，a~z映射为10~35</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Map</span><span class="params">(<span class="keyword">char</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; r &gt;= <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> r - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (r &lt;= <span class="string">&#x27;z&#x27;</span> &amp;&amp; r &gt;= <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> r - <span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ToRadix10</span><span class="params">(<span class="keyword">const</span> string&amp; s, <span class="keyword">int</span> radix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        ans = ans * radix + <span class="built_in">Map</span>(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    string N1, N2;</span><br><span class="line">    <span class="keyword">int</span> tag, radix;</span><br><span class="line">    cin &gt;&gt; N1 &gt;&gt; N2 &gt;&gt; tag &gt;&gt; radix;</span><br><span class="line">    <span class="keyword">if</span> (tag == <span class="number">2</span>) std::<span class="built_in">swap</span>(N1, N2);</span><br><span class="line">    <span class="comment">// 把N1换成十进制</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> N1_10 = <span class="built_in">ToRadix10</span>(N1, radix);</span><br><span class="line">    <span class="comment">// 找到N2中的最大数字m;</span></span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N2.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        m = std::<span class="built_in">max</span>(m, <span class="built_in">Map</span>(N2[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历，除了测试点七都能过</span></span><br><span class="line">    <span class="comment">// int radix_to_find;</span></span><br><span class="line">    <span class="comment">// for (radix_to_find = m + 1; radix_to_find &lt;= 50; ++radix_to_find) &#123;</span></span><br><span class="line">    <span class="comment">//     // 计算M进制下的N2的十进制表示</span></span><br><span class="line">    <span class="comment">//     long long N2_10 = ToRadix10(N2, radix_to_find);</span></span><br><span class="line">    <span class="comment">//     if (N2_10 == N1_10) &#123;</span></span><br><span class="line">    <span class="comment">//         cout &lt;&lt; radix_to_find;</span></span><br><span class="line">    <span class="comment">//         return 0;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 二分搜索AC,是不重复元素的二分</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> beg = m + <span class="number">1</span>, mid;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> end = std::<span class="built_in">max</span>(N1_10, beg);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> N2_10;</span><br><span class="line">    <span class="keyword">while</span> (beg &lt;= end) &#123;</span><br><span class="line">        mid   = beg + (end - beg) / <span class="number">2</span>;</span><br><span class="line">        N2_10 = <span class="built_in">ToRadix10</span>(N2, mid);</span><br><span class="line">        <span class="keyword">if</span> (N2_10 == N1_10) &#123;</span><br><span class="line">            cout &lt;&lt; mid;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (N2_10 &gt; N1_10 || N2_10 &lt;= <span class="number">0</span>) &#123;  <span class="comment">// 后面一个条件是防止溢出</span></span><br><span class="line">            end = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            beg = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Impossible&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1024 Palindromic Number</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201024%20Palindromic%20Number/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201024%20Palindromic%20Number/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1024-Palindromic-Number"><a href="#PAT-甲级-1024-Palindromic-Number" class="headerlink" title="PAT 甲级 1024 Palindromic Number"></a>PAT 甲级 1024 Palindromic Number</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BigN</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; d&#123;vector&lt;<span class="keyword">int</span>&gt;(<span class="number">1000</span>, <span class="number">0</span>)&#125;;</span><br><span class="line">    <span class="keyword">int</span> len&#123;<span class="number">0</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">BigN <span class="title">Change</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BigN ans;</span><br><span class="line">    ans.len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.len; ++i) &#123;</span><br><span class="line">        ans.d[i] = str[ans.len - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BigN <span class="title">Add</span><span class="params">(<span class="keyword">const</span> BigN a, <span class="keyword">const</span> BigN b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BigN ans;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len || i &lt; b.len; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp          = a.d[i] + b.d[i] + carry;</span><br><span class="line">        ans.d[ans.len++] = tmp % <span class="number">10</span>;</span><br><span class="line">        carry            = tmp / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry != <span class="number">0</span>) &#123;</span><br><span class="line">        ans.d[ans.len++] += carry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsPalindromic</span><span class="params">(<span class="keyword">const</span> BigN&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = a.len - <span class="number">1</span>; i &lt; j; ++i, --j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.d[i] != a.d[j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(BigN&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = a.len - <span class="number">1</span>; i &lt; j; ++i, --j) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(a.d[i], a.d[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">const</span> BigN&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        cout &lt;&lt; a.d[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    cin &gt;&gt; s &gt;&gt; k;</span><br><span class="line">    BigN num = <span class="built_in">Change</span>(s.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">IsPalindromic</span>(num)) <span class="keyword">break</span>;</span><br><span class="line">        BigN num_re = num;</span><br><span class="line">        <span class="built_in">Reverse</span>(num_re);</span><br><span class="line">        num = <span class="built_in">Add</span>(num, num_re);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Print</span>(num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1025 PAT Ranking</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201025%20PAT%20Ranking/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201025%20PAT%20Ranking/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1025-PAT-Ranking"><a href="#PAT-甲级-1025-PAT-Ranking" class="headerlink" title="PAT 甲级 1025 PAT Ranking"></a>PAT 甲级 1025 PAT Ranking</h2><p>考察结构体的排序<br>比较有趣的点是local_rank的获取，输入每个考场的学生之后就排序，得到local_rank；所有输入完毕后排序得到final_rank.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#define _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string registration_number;</span><br><span class="line">    <span class="keyword">int</span> scores&#123; <span class="number">-1</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> location_number&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> local_rank&#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> final_rank&#123; <span class="number">0</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">Student testee[<span class="number">30010</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Student &amp;a, Student &amp;b)</span> </span>&#123; <span class="comment">//先按照分数降序，再按照注册号升序</span></span><br><span class="line">    <span class="keyword">if</span> (a.scores != b.scores) <span class="keyword">return</span> a.scores &gt; b.scores;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.registration_number &lt; b.registration_number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin); </span></span><br><span class="line">    <span class="keyword">int</span> N; cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">int</span> ctr = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> local_ctr = <span class="number">1</span>; local_ctr &lt;= N; ++local_ctr) &#123; <span class="comment">//local_ctr 考场号计数</span></span><br><span class="line">        <span class="keyword">int</span> K; cin &gt;&gt; K;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123; <span class="comment">//每个考场K个人</span></span><br><span class="line">            cin &gt;&gt; testee[ctr].registration_number &gt;&gt; testee[ctr].scores;</span><br><span class="line">            testee[ctr].location_number = local_ctr;</span><br><span class="line">            ++ctr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(testee + ctr - K, testee + ctr, cmp);<span class="comment">//对每个考场里的K个人排序，写入local_rank</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = ctr - K; i &lt; ctr; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == ctr - K) &#123; testee[i].local_rank = <span class="number">1</span>; <span class="keyword">continue</span>; &#125;</span><br><span class="line">            <span class="keyword">if</span> (testee[i].scores == testee[i - <span class="number">1</span>].scores) &#123;</span><br><span class="line">                testee[i].local_rank = testee[i - <span class="number">1</span>].local_rank;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                testee[i].local_rank = i - (ctr - K) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(testee, testee + ctr, cmp); <span class="comment">//对所有人总排序，写入final_rank;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ctr; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) testee[i].final_rank = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (testee[i].scores == testee[i - <span class="number">1</span>].scores) &#123;</span><br><span class="line">            testee[i].final_rank = testee[i - <span class="number">1</span>].final_rank;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            testee[i].final_rank = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ctr &lt;&lt; endl; <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ctr; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; testee[i].registration_number &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; testee[i].final_rank</span><br><span class="line">            &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; testee[i].location_number &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; testee[i].local_rank &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1022 Digital Library</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201022%20Digital%20Library/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201022%20Digital%20Library/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1022-Digital-Library"><a href="#PAT-甲级-1022-Digital-Library" class="headerlink" title="PAT 甲级 1022 Digital Library"></a>PAT 甲级 1022 Digital Library</h2><p>注意最后两个测试点，会有0000001这样的数据，输出格式需要printf(“%07d”,id);。</p><p>另外还有几个输入的区别：<br>cin&gt;&gt;s; 会把开始的空白字符（包括换行符）从缓冲区中取出并丢弃，遇到非空白字符之后，再次遇到空白字符时，会把空白字符留在缓冲区，s中没有空白字符。<br>getline(cin,s); 会把换行符从缓冲区中取出并丢弃，也就是说s中没有换行符，缓冲区中也没有。<br>cin.get(); 会从缓冲区中读取一个字符。<br>具体参考CPP Reference。</p><p>所以：<br>（1）cin&gt;&gt;s;后面可以直接接cin&gt;&gt;s;，但不能直接接getline(cin,s);，需要中间加一个cin.get();，否则要么s是空string，要么s开始有空白字符。<br>（2）getline(cin,s);后面可以直接接cin&gt;&gt;s;。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(map&lt;string,set&lt;<span class="keyword">int</span>&gt;&gt; &amp;mp,<span class="keyword">const</span> string &amp;key,<span class="keyword">char</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c: %s\n&quot;</span>,type,key.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">if</span>(mp.<span class="built_in">find</span>(key)==mp.<span class="built_in">end</span>()) <span class="built_in">printf</span>(<span class="string">&quot;Not Found\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:mp[key]) <span class="built_in">printf</span>(<span class="string">&quot;%07d\n&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    map&lt;string,set&lt;<span class="keyword">int</span>&gt;&gt; title_mp,author_mp,key_words_mp,publisher_mp,year_mp;</span><br><span class="line">    <span class="keyword">int</span> N;cin&gt;&gt;N;</span><br><span class="line">    <span class="keyword">int</span> id;string title,author,key_word,publisher,year;</span><br><span class="line">    <span class="keyword">while</span>(N--)&#123;</span><br><span class="line">        cin&gt;&gt;id;cin.<span class="built_in">get</span>();<span class="built_in">getline</span>(cin,title);<span class="built_in">getline</span>(cin,author);</span><br><span class="line">        title_mp[title].<span class="built_in">insert</span>(id);author_mp[author].<span class="built_in">insert</span>(id);</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            cin&gt;&gt;key_word;</span><br><span class="line">            key_words_mp[key_word].<span class="built_in">insert</span>(id);</span><br><span class="line">        &#125;<span class="keyword">while</span>(cin.<span class="built_in">get</span>()!=<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="built_in">getline</span>(cin,publisher);<span class="built_in">getline</span>(cin,year);</span><br><span class="line">        publisher_mp[publisher].<span class="built_in">insert</span>(id);year_mp[year].<span class="built_in">insert</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;N;cin.<span class="built_in">get</span>();<span class="keyword">char</span> type;string key;</span><br><span class="line">    <span class="keyword">while</span>(N--)&#123;</span><br><span class="line">        type=cin.<span class="built_in">get</span>();cin.<span class="built_in">get</span>();cin.<span class="built_in">get</span>();<span class="built_in">getline</span>(cin,key);</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (type)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            <span class="built_in">Find</span>(title_mp,key,type);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            <span class="built_in">Find</span>(author_mp,key,type);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">            <span class="built_in">Find</span>(key_words_mp,key,type);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">            <span class="built_in">Find</span>(publisher_mp,key,type);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">            <span class="built_in">Find</span>(year_mp,key,type);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1029 Median</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201029%20Median/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201029%20Median/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1029-Median"><a href="#PAT-甲级-1029-Median" class="headerlink" title="PAT 甲级 1029 Median"></a>PAT 甲级 1029 Median</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// Input</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">nums1</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : nums1) cin &gt;&gt; i;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">nums2</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : nums2) cin &gt;&gt; i;</span><br><span class="line">    <span class="comment">// 中位数坐标</span></span><br><span class="line">    <span class="keyword">int</span> target = (nums1.<span class="built_in">size</span>() + nums2.<span class="built_in">size</span>() - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 合并输出，好写但O((m+n)log(m+n))</span></span><br><span class="line">    <span class="comment">// vector&lt;long long&gt; nums;</span></span><br><span class="line">    <span class="comment">// nums.insert(nums.end(), nums1.begin(), nums1.end());</span></span><br><span class="line">    <span class="comment">// nums.insert(nums.end(), nums2.begin(), nums2.end());</span></span><br><span class="line">    <span class="comment">// sort(nums.begin(), nums.end());</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; nums[target];</span></span><br><span class="line">    <span class="comment">// two pointer，归并的方式计数或者直接归并,O(m+n)</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line">    <span class="comment">// 归并过程</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; nums1.<span class="built_in">size</span>() &amp;&amp; j &lt; nums2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index == target) &#123; ans = nums1[i]; &#125;</span><br><span class="line">            ++i, ++index;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index == target) &#123; ans = nums2[j]; &#125;</span><br><span class="line">            ++j, ++index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 剩余元素</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; nums1.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == target) &#123; ans = nums1[i]; &#125;</span><br><span class="line">        ++i, ++index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; nums2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == target) &#123; ans = nums2[j]; &#125;</span><br><span class="line">        ++j, ++index;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1032 Sharing</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201032%20Sharing/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201032%20Sharing/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1032-Sharing"><a href="#PAT-甲级-1032-Sharing" class="headerlink" title="PAT 甲级 1032 Sharing"></a>PAT 甲级 1032 Sharing</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kMAXN = <span class="number">100000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> address, next, flag&#123;<span class="literal">false</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">&#125; node[kMAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> head1, head2, N;</span><br><span class="line">    cin &gt;&gt; head1 &gt;&gt; head2 &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">    Node tmp;</span><br><span class="line">    <span class="keyword">while</span> (N--) &#123;</span><br><span class="line">        cin &gt;&gt; tmp.address &gt;&gt; tmp.data &gt;&gt; tmp.next;</span><br><span class="line">        node[tmp.address] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head1 != <span class="number">-1</span>) &#123;</span><br><span class="line">        node[head1].flag = <span class="literal">true</span>;</span><br><span class="line">        head1 = node[head1].next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head2 != <span class="number">-1</span> &amp;&amp; node[head2].flag != <span class="literal">true</span>) &#123;</span><br><span class="line">        head2 = node[head2].next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    head2 == <span class="number">-1</span> ? <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>) : <span class="built_in">printf</span>(<span class="string">&quot;%05d\n&quot;</span>, head2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1028 List Sorting</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201028%20List%20Sorting/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201028%20List%20Sorting/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1028-List-Sorting"><a href="#PAT-甲级-1028-List-Sorting" class="headerlink" title="PAT 甲级 1028 List Sorting"></a>PAT 甲级 1028 List Sorting</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> sort_column;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string id_;</span><br><span class="line">    string name_;</span><br><span class="line">    <span class="keyword">int</span> grades_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Student &amp;lhs, <span class="keyword">const</span> Student &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sort_column == <span class="number">3</span> &amp;&amp; lhs.grades_ != rhs.grades_)</span><br><span class="line">        <span class="keyword">return</span> lhs.grades_ &lt; rhs.grades_;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sort_column == <span class="number">2</span> &amp;&amp; lhs.name_ != rhs.name_)</span><br><span class="line">        <span class="keyword">return</span> lhs.name_ &lt; rhs.name_;</span><br><span class="line">    <span class="keyword">return</span> lhs.id_ &lt; rhs.id_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n &gt;&gt; sort_column;</span><br><span class="line">    <span class="function">vector&lt;Student&gt; <span class="title">student_set</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : student_set)cin &gt;&gt; i.id_ &gt;&gt; i.name_ &gt;&gt; i.grades_;</span><br><span class="line">    <span class="built_in">sort</span>(student_set.<span class="built_in">begin</span>(), student_set.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : student_set) &#123;</span><br><span class="line">        cout &lt;&lt; i.id_ &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.name_ &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.grades_ &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1027 Colors in Mars</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201027%20Colors%20in%20Mars/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201027%20Colors%20in%20Mars/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1027-Colors-in-Mars"><a href="#PAT-甲级-1027-Colors-in-Mars" class="headerlink" title="PAT 甲级 1027 Colors in Mars"></a>PAT 甲级 1027 Colors in Mars</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> radix_13_in_mars[<span class="number">13</span>] = &#123; <span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span> ,<span class="string">&#x27;4&#x27;</span> ,<span class="string">&#x27;5&#x27;</span> ,<span class="string">&#x27;6&#x27;</span> ,<span class="string">&#x27;7&#x27;</span> ,<span class="string">&#x27;8&#x27;</span>,</span><br><span class="line">                                <span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> color_10;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;#&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; color_10;</span><br><span class="line">        cout &lt;&lt; radix_13_in_mars[color_10 / <span class="number">13</span>]</span><br><span class="line">            &lt;&lt; radix_13_in_mars[color_10 % <span class="number">13</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1035 Password</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201035%20Password/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201035%20Password/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1035-Password"><a href="#PAT-甲级-1035-Password" class="headerlink" title="PAT 甲级 1035 Password"></a>PAT 甲级 1035 Password</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name_;</span><br><span class="line">    string password_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> N; cin &gt;&gt; N;</span><br><span class="line">    vector&lt;Student&gt; student_modified_set;</span><br><span class="line">    string name, password;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; name &gt;&gt; password;</span><br><span class="line">        <span class="keyword">bool</span> this_is_modified = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : password) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="string">&#x27;1&#x27;</span>) &#123; i = <span class="string">&#x27;@&#x27;</span>; this_is_modified = <span class="literal">true</span>; &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;0&#x27;</span>) &#123; i = <span class="string">&#x27;%&#x27;</span>; this_is_modified = <span class="literal">true</span>; &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;l&#x27;</span>) &#123; i = <span class="string">&#x27;L&#x27;</span>; this_is_modified = <span class="literal">true</span>; &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;O&#x27;</span>) &#123; i = <span class="string">&#x27;o&#x27;</span>; this_is_modified = <span class="literal">true</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (this_is_modified) student_modified_set.<span class="built_in">push_back</span>(&#123; name,password &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (student_modified_set.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;There is 1 account and no account is modified&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;There are %d accounts and no account is modified&quot;</span>, N);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; student_modified_set.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : student_modified_set) &#123;</span><br><span class="line">            cout &lt;&lt; i.name_ &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.password_ &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1033 To Fill or Not to Fill</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201033%20To%20Fill%20or%20Not%20to%20Fill/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201033%20To%20Fill%20or%20Not%20to%20Fill/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1033-To-Fill-or-Not-to-Fill"><a href="#PAT-甲级-1033-To-Fill-or-Not-to-Fill" class="headerlink" title="PAT 甲级 1033 To Fill or Not to Fill"></a>PAT 甲级 1033 To Fill or Not to Fill</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kMAXN = <span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF   = <span class="number">100000000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Station</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> price, dis;</span><br><span class="line">&#125; st[kMAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Station&amp; a, <span class="keyword">const</span> Station&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.dis &lt; b.dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> Cmax, D, Davg;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%d&quot;</span>, &amp;Cmax, &amp;D, &amp;Davg, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;st[i].price, &amp;st[i].dis);</span><br><span class="line">    &#125;</span><br><span class="line">    st[n].price = <span class="number">0</span>;</span><br><span class="line">    st[n].dis   = D;</span><br><span class="line">    <span class="built_in">sort</span>(st, st + n, cmp);</span><br><span class="line">    <span class="comment">// 如果第一个加油站距离不是0，无法前进</span></span><br><span class="line">    <span class="keyword">if</span> (st[<span class="number">0</span>].dis != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The maximum travel distance = 0.00\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> now    = <span class="number">0</span>;  <span class="comment">// 当前加油站编号</span></span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>, nowTank = <span class="number">0</span>, MAX = Cmax * Davg;</span><br><span class="line">        <span class="keyword">while</span> (now &lt; n) &#123;</span><br><span class="line">            <span class="comment">// 每次循环选出下一个需要到达的加油站</span></span><br><span class="line">            <span class="comment">// 选出从当前加油站满油能到达范围内的第一个油价低于当前油价的加油站</span></span><br><span class="line">            <span class="comment">// 如果没有低于当前油价的加油站，则选择价格最低那个</span></span><br><span class="line">            <span class="keyword">int</span> k           = <span class="number">-1</span>;  <span class="comment">// 最低油价的加油站编号</span></span><br><span class="line">            <span class="keyword">double</span> priceMin = INF;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = now + <span class="number">1</span>; i &lt;= n &amp;&amp; st[i].dis - st[now].dis &lt;= MAX; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (st[i].price &lt; priceMin) &#123;</span><br><span class="line">                    <span class="comment">// 如果油价比当前最低油价低</span></span><br><span class="line">                    priceMin = st[i].price;  <span class="comment">// 更新最低油价</span></span><br><span class="line">                    k        = i;</span><br><span class="line">                    <span class="keyword">if</span> (priceMin &lt; st[now].price) &#123;</span><br><span class="line">                        <span class="comment">// 如果找到第一个油价低于当前油价的加油站，直接中断循环</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 满油状态下无法找到加油站，说明达不到下一个点，退出循环结束</span></span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 能找到可达加油站k，计算转移花费</span></span><br><span class="line">            <span class="keyword">double</span> need = (st[k].dis - st[now].dis) / Davg;</span><br><span class="line">            <span class="keyword">if</span> (priceMin &lt; st[now].price) &#123;  <span class="comment">// 加油站k的价格小于当前加油站的价格</span></span><br><span class="line">                <span class="comment">// 只买足够到达加油站k的油</span></span><br><span class="line">                <span class="keyword">if</span> (nowTank &lt; need) &#123;</span><br><span class="line">                    ans += (need - nowTank) * st[now].price;</span><br><span class="line">                    nowTank = <span class="number">0</span>;  <span class="comment">// 到达加油站k之后邮箱油量为0</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 油箱油量超过need，不用买油</span></span><br><span class="line">                    nowTank -= need;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;                                        <span class="comment">// 加油站k的价格高于当前价格</span></span><br><span class="line">                ans += (Cmax - nowTank) * st[now].price;  <span class="comment">// 把油加满</span></span><br><span class="line">                nowTank = Cmax - need;                    <span class="comment">// 到达后邮箱内的油量</span></span><br><span class="line">            &#125;</span><br><span class="line">            now = k;  <span class="comment">// 到达加油站k,进入下层循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (now == n) &#123;</span><br><span class="line">            <span class="comment">// 能到终点</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;The maximum travel distance = %.2f\n&quot;</span>, st[now].dis + MAX);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1031 Hello World for U</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201031%20Hello%20World%20for%20U/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201031%20Hello%20World%20for%20U/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1031-Hello-World-for-U"><a href="#PAT-甲级-1031-Hello-World-for-U" class="headerlink" title="PAT 甲级 1031 Hello World for U"></a>PAT 甲级 1031 Hello World for U</h2><p>图形输出的模拟题。<br>胡凡《算法笔记》（第89页）语：“这种题目的做法一般有两种：①通过规律，直接进行输出。②定义一个二维字符数组，通过规律填充之，然后输出整个二维数组。”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> figure_to_print[<span class="number">80</span>][<span class="number">80</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    string origin_str; cin &gt;&gt; origin_str;</span><br><span class="line">    <span class="comment">//初始化.</span></span><br><span class="line">    <span class="keyword">int</span> N = origin_str.<span class="built_in">size</span>(), N1 = (N + <span class="number">2</span>) / <span class="number">3</span>, N2 = N - <span class="number">2</span> * N1 + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> line = <span class="number">0</span>; line &lt; N1; ++line) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; N2; ++row) &#123;</span><br><span class="line">            figure_to_print[line][row] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写入figure.</span></span><br><span class="line">    <span class="keyword">int</span> char_ctr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> line = <span class="number">0</span>; line &lt; N1; ++line) &#123;</span><br><span class="line">        figure_to_print[line][<span class="number">0</span>] = origin_str[char_ctr++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt; N2 - <span class="number">1</span>; ++row) &#123;</span><br><span class="line">        figure_to_print[N1 - <span class="number">1</span>][row] = origin_str[char_ctr++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> line = N1 - <span class="number">1</span>; line &gt;= <span class="number">0</span>; --line) &#123;</span><br><span class="line">        figure_to_print[line][N2 - <span class="number">1</span>] = origin_str[char_ctr++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> line = <span class="number">0</span>; line &lt; N1; ++line) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; N2; ++row) &#123;</span><br><span class="line">            cout &lt;&lt; figure_to_print[line][row];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1037 Magic Coupon</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201037%20Magic%20Coupon/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201037%20Magic%20Coupon/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1037-Magic-Coupon"><a href="#PAT-甲级-1037-Magic-Coupon" class="headerlink" title="PAT 甲级 1037 Magic Coupon"></a>PAT 甲级 1037 Magic Coupon</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n_coupons, n_product;</span><br><span class="line">    cin &gt;&gt; n_coupons;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">coupons</span><span class="params">(n_coupons)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : coupons) cin &gt;&gt; i;</span><br><span class="line">    cin &gt;&gt; n_product;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">product</span><span class="params">(n_product)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : product) cin &gt;&gt; i;</span><br><span class="line">    <span class="built_in">sort</span>(coupons.<span class="built_in">rbegin</span>(), coupons.<span class="built_in">rend</span>());</span><br><span class="line">    <span class="built_in">sort</span>(product.<span class="built_in">rbegin</span>(), product.<span class="built_in">rend</span>());</span><br><span class="line">    <span class="comment">// 先从头开始遍历，把正数相乘</span></span><br><span class="line">    <span class="comment">// 然后从末尾开始遍历，把负数相乘</span></span><br><span class="line">    <span class="keyword">int</span> i   = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n_coupons &amp;&amp; i &lt; n_product &amp;&amp; coupons[i] * product[i] &gt; <span class="number">0</span>; ++i) &#123;</span><br><span class="line">        ans += coupons[i] * product[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> itr2 = n_product - <span class="number">1</span>, itr1 = n_coupons - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; itr2 &gt;= i &amp;&amp; itr1 &gt;= i &amp;&amp; coupons[itr1] * product[itr2] &gt; <span class="number">0</span>; --itr1, --itr2) &#123;</span><br><span class="line">        ans += coupons[itr1] * product[itr2];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1036 Boys vs Girls</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201036%20Boys%20vs%20Girls/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201036%20Boys%20vs%20Girls/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1036-Boys-vs-Girls"><a href="#PAT-甲级-1036-Boys-vs-Girls" class="headerlink" title="PAT 甲级 1036 Boys vs Girls"></a>PAT 甲级 1036 Boys vs Girls</h2><p>简单模拟</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name;</span><br><span class="line">    string id;</span><br><span class="line">    <span class="keyword">int</span> grade&#123; <span class="number">-1</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Student&gt; male_student_set, female_student_set;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Student &amp;lhs, <span class="keyword">const</span> Student &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.grade &lt; rhs.grade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    string name, id; <span class="keyword">char</span> gender; <span class="keyword">int</span> grade;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        cin &gt;&gt; name &gt;&gt; gender &gt;&gt; id &gt;&gt; grade;</span><br><span class="line">        gender == <span class="string">&#x27;M&#x27;</span> ? male_student_set.<span class="built_in">push_back</span>(&#123; name,id,grade &#125;)</span><br><span class="line">            : female_student_set.<span class="built_in">push_back</span>(&#123; name,id,grade &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(male_student_set.<span class="built_in">begin</span>(), male_student_set.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="built_in">sort</span>(female_student_set.<span class="built_in">begin</span>(), female_student_set.<span class="built_in">end</span>(), cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> is_na = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (female_student_set.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Absent&quot;</span> &lt;&lt; endl;</span><br><span class="line">        is_na = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; female_student_set.<span class="built_in">back</span>().name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; female_student_set.<span class="built_in">back</span>().id &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (male_student_set.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Absent&quot;</span> &lt;&lt; endl;</span><br><span class="line">        is_na = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; male_student_set.<span class="built_in">front</span>().name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; male_student_set.<span class="built_in">front</span>().id &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (is_na) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NA&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; female_student_set.<span class="built_in">back</span>().grade - male_student_set.<span class="built_in">front</span>().grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1038 Recover the Smallest Number 两种思路</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201038%20Recover%20the%20Smallest%20Number%20%E4%B8%A4%E7%A7%8D%E6%80%9D%E8%B7%AF/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201038%20Recover%20the%20Smallest%20Number%20%E4%B8%A4%E7%A7%8D%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>这道题的大致思路是每次把能够让拼接后的数字最小的串放在前面，怎么来比较哪个放在前面最小呢？考虑下面两种情况<br>情况1：321 32 324<br>情况2：131 13 134<br>显然应该把第一位最小的放在最前面，第一位相同比较第二位，如果所有位都相同呢？比如上面32和13的情况？可以循环进行比较。比如判断321和32谁放在前面的时候，比较3和3，2和2，3和1得到结果321更小，所以321放在前面。这个循环比较方法的思路和证明并不直观。需要考虑到前n位相同的时候，拼接串需要保证小的数字更早出现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 按位循环比较（这个可行性不是那么直观）</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> string&amp; a, <span class="keyword">const</span> string&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sz = std::<span class="built_in">max</span>(a.<span class="built_in">size</span>(), b.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i % a.<span class="built_in">size</span>()] != b[i % b.<span class="built_in">size</span>()]) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[i % a.<span class="built_in">size</span>()] &lt; b[i % b.<span class="built_in">size</span>()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">nums</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : nums) ans += i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 去除前导0</span></span><br><span class="line">    <span class="keyword">bool</span> fro_zero = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : ans) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fro_zero &amp;&amp; i != <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            fro_zero = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fro_zero) cout &lt;&lt; i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果全是0，输出0</span></span><br><span class="line">    <span class="keyword">if</span> (fro_zero) cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外一种思路更加自然：<br>考虑a和b两个串，a+b和b+a分别表示a拼接在前面和b拼接在前面。如果a+b&lt;b+a，那么要让拼接的结果更小，只要把a放在前面就可以了。从而可以贪心：在判断a和b谁放在前面的时候，每次都把x+y&lt;y+x的x放在前面。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 拼接之后比较</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> string&amp; a, <span class="keyword">const</span> string&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b &lt; b + a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">nums</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; nums[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : nums) ans += i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 去除前导0</span></span><br><span class="line">    <span class="keyword">bool</span> fro_zero = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : ans) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fro_zero &amp;&amp; i != <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            fro_zero = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fro_zero) cout &lt;&lt; i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果全是0，输出0</span></span><br><span class="line">    <span class="keyword">if</span> (fro_zero) cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1041 Be Unique</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201041%20Be%20Unique/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201041%20Be%20Unique/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1041-Be-Unique"><a href="#PAT-甲级-1041-Be-Unique" class="headerlink" title="PAT 甲级 1041 Be Unique"></a>PAT 甲级 1041 Be Unique</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">book</span><span class="params">(<span class="number">10010</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">bet</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : bet) &#123;</span><br><span class="line">        cin &gt;&gt; i;</span><br><span class="line">        book[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (book[bet[i]] == <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; bet[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == n)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;None&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1039 Course List for Student</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201039%20Course%20List%20for%20Student/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201039%20Course%20List%20for%20Student/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1039-Course-List-for-Student"><a href="#PAT-甲级-1039-Course-List-for-Student" class="headerlink" title="PAT 甲级 1039 Course List for Student"></a>PAT 甲级 1039 Course List for Student</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> N, K;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; K;</span><br><span class="line">    map&lt;string, set&lt;<span class="keyword">int</span>&gt;&gt; course_list;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> course_id;</span><br><span class="line">        <span class="keyword">int</span> student_num;</span><br><span class="line">        cin &gt;&gt; course_id &gt;&gt; student_num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; student_num; ++j) &#123;</span><br><span class="line">            cin &gt;&gt; name;</span><br><span class="line">            course_list[name].<span class="built_in">insert</span>(course_id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; name;</span><br><span class="line">        cout &lt;&lt; name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; course_list[name].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (course_list[name].<span class="built_in">size</span>() != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> id : course_list[name]) cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; id;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1046 Shortest Distance</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201046%20Shortest%20Distance/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201046%20Shortest%20Distance/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1046-Shortest-Distance"><a href="#PAT-甲级-1046-Shortest-Distance" class="headerlink" title="PAT 甲级 1046 Shortest Distance"></a>PAT 甲级 1046 Shortest Distance</h2><p>这道题的时间要求很严格，用数组储存相邻两个点的距离，每个用例再计算的写法会timeout（因为对于N组查询，最坏情况用时为O(N^2) ）</p><p>输入的时候顺便计算好到0点的距离，用例再做一次减法就好了，这样用时为O(N)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n; <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">distance</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> total_distance = <span class="number">0</span>;</span><br><span class="line">    distance[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//distance[i]是i到0的距离</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; distance[i];</span><br><span class="line">        total_distance += distance[i];</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">1</span>) distance[i] += distance[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> trash; cin &gt;&gt; trash; total_distance += trash;</span><br><span class="line">    <span class="keyword">int</span> m; cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y; cin &gt;&gt; x &gt;&gt; y; x -= <span class="number">1</span>; y -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y) std::<span class="built_in">swap</span>(x, y);</span><br><span class="line">        <span class="keyword">int</span> half_distance = distance[y] - distance[x];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, half_distance &lt; total_distance - half_distance ?</span><br><span class="line">            half_distance : total_distance - half_distance);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1044 Shopping in Mars</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201044%20Shopping%20in%20Mars/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201044%20Shopping%20in%20Mars/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1044-Shopping-in-Mars"><a href="#PAT-甲级-1044-Shopping-in-Mars" class="headerlink" title="PAT 甲级 1044 Shopping in Mars"></a>PAT 甲级 1044 Shopping in Mars</h2><p>二分查找</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> N, M;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">diamond</span><span class="params">(N + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">sum</span><span class="params">(N + <span class="number">1</span>)</span></span>;</span><br><span class="line">    sum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; diamond[i];</span><br><span class="line">        sum[i] = diamond[i] + sum[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两遍遍历，第一遍看有没有相等的，第二遍看最小差值的</span></span><br><span class="line">    <span class="comment">// 两遍可以统一起来，用一个diff标志和M的差值。</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; min_i, min_j;</span><br><span class="line">    <span class="keyword">int</span> diff = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="comment">// 二分查找</span></span><br><span class="line">        <span class="keyword">int</span> beg = i, end = N, mid;</span><br><span class="line">        <span class="keyword">while</span> (beg &lt; end) &#123;</span><br><span class="line">            mid = beg + (end - beg) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (sum[mid] - sum[i] &lt; M) &#123;</span><br><span class="line">                beg = mid + <span class="number">1</span>;  <span class="comment">// 所求点，不管是刚好等于还是稍微大于，一定在beg或者beg的右边</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                end = mid;  <span class="comment">// 所求点，一定在end或者end的左边</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上面的查找不保证找到了，所以还要判断的</span></span><br><span class="line">        <span class="keyword">if</span> (sum[end] - sum[i] &gt;= M) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum[end] - sum[i] == diff) &#123;</span><br><span class="line">                min_i.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">                min_j.<span class="built_in">push_back</span>(end);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sum[end] - sum[i] &lt; diff) &#123;</span><br><span class="line">                min_i.<span class="built_in">clear</span>();</span><br><span class="line">                min_j.<span class="built_in">clear</span>();</span><br><span class="line">                diff = sum[end] - sum[i];</span><br><span class="line">                min_i.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">                min_j.<span class="built_in">push_back</span>(end);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; min_i.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d-%d\n&quot;</span>, min_i[i], min_j[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1042 Shuffling Machine</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201042%20Shuffling%20Machine/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201042%20Shuffling%20Machine/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1042-Shuffling-Machine"><a href="#PAT-甲级-1042-Shuffling-Machine" class="headerlink" title="PAT 甲级 1042 Shuffling Machine"></a>PAT 甲级 1042 Shuffling Machine</h2><p>简单模拟</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">cards</span><span class="params">(<span class="number">55</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">55</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i / <span class="number">13</span> == <span class="number">0</span> || i == <span class="number">13</span>) &#123; cards[i] += <span class="string">&quot;S&quot;</span>; cards[i] += <span class="built_in">to_string</span>(i); &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i / <span class="number">13</span> == <span class="number">1</span> || i == <span class="number">26</span>) &#123; cards[i] += <span class="string">&quot;H&quot;</span>; cards[i] += <span class="built_in">to_string</span>(i - <span class="number">13</span>); &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i / <span class="number">13</span> == <span class="number">2</span> || i == <span class="number">39</span>) &#123; cards[i] += <span class="string">&quot;C&quot;</span>; cards[i] += <span class="built_in">to_string</span>(i - <span class="number">26</span>); &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i / <span class="number">13</span> == <span class="number">3</span> || i == <span class="number">52</span>) &#123; cards[i] += <span class="string">&quot;D&quot;</span>; cards[i] += <span class="built_in">to_string</span>(i - <span class="number">39</span>); &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i / <span class="number">13</span> == <span class="number">4</span>) &#123; cards[i] += <span class="string">&quot;J&quot;</span>; cards[i] += <span class="built_in">to_string</span>(i - <span class="number">52</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">range</span><span class="params">(<span class="number">55</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">55</span>; ++i) cin &gt;&gt; range[i];</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">tmp</span><span class="params">(cards.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">55</span>; ++i) &#123;</span><br><span class="line">            tmp[range[i]] = cards[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cards = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">55</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; cards[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1048 Find Coins two pointer的写法</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201048%20Find%20Coins%20two%20pointer%E7%9A%84%E5%86%99%E6%B3%95/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201048%20Find%20Coins%20two%20pointer%E7%9A%84%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1048-Find-Coins"><a href="#PAT-甲级-1048-Find-Coins" class="headerlink" title="PAT 甲级 1048 Find Coins"></a>PAT 甲级 1048 Find Coins</h2><p>这道题可以用二分、散列和two pointers三种方法实现，此前写过二分的方法：<a href="https://blog.csdn.net/u011917745/article/details/115606073">PAT 甲级 1048 Find Coins 二分的写法</a><br>这里是two pointer的写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> N, M;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">coins</span><span class="params">(N)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : coins) cin &gt;&gt; i;</span><br><span class="line">    <span class="built_in">sort</span>(coins.<span class="built_in">begin</span>(), coins.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = N - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (coins[i] + coins[j] == M) &#123;</span><br><span class="line">            cout &lt;&lt; coins[i] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; coins[j] &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (coins[i] + coins[j] &gt; M) &#123;</span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (coins[i] + coins[j] &lt; M) &#123;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == j) cout &lt;&lt; <span class="string">&quot;No Solution&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1047 Student List for Course</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201047%20Student%20List%20for%20Course/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201047%20Student%20List%20for%20Course/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1047-Student-List-for-Course"><a href="#PAT-甲级-1047-Student-List-for-Course" class="headerlink" title="PAT 甲级 1047 Student List for Course"></a>PAT 甲级 1047 Student List for Course</h2><p>这道题时间卡得很严，如果用string，需要配合c_str()方法和printf()，否则就会超时。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> student_name[<span class="number">40010</span>][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(student_name[a],student_name[b])&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; cources[<span class="number">2510</span>];</span><br><span class="line">    <span class="keyword">int</span> N,K;cin&gt;&gt;N&gt;&gt;K;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> num,c_id;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>,&amp;student_name[i],&amp;num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;++j)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;c_id);</span><br><span class="line">            cources[c_id].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;++i)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,cources[i].<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">if</span>(cources[i].<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">sort</span>(cources[i].<span class="built_in">begin</span>(),cources[i].<span class="built_in">end</span>(),cmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> s_id:cources[i])</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,student_name[s_id]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用string，控速步骤是对string的cout。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string student_name[<span class="number">40010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> student_name[a] &lt; student_name[b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; cources[<span class="number">2510</span>];</span><br><span class="line">    <span class="keyword">int</span> N, K;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> num, c_id;</span><br><span class="line">        cin &gt;&gt; student_name[i] &gt;&gt; num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num; ++j) &#123;</span><br><span class="line">            cin &gt;&gt; c_id;</span><br><span class="line">            cources[c_id].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, i, cources[i].<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">if</span> (cources[i].<span class="built_in">size</span>() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">sort</span>(cources[i].<span class="built_in">begin</span>(), cources[i].<span class="built_in">end</span>(), cmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> s_id : cources[i])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,student_name[s_id].<span class="built_in">c_str</span>()); <span class="comment">// OK</span></span><br><span class="line">            <span class="comment">// cout&lt;&lt;student_name[s_id]&lt;&lt;endl; // 超时</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1050 String Subtraction</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201050%20String%20Subtraction/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201050%20String%20Subtraction/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1050-String-Subtraction"><a href="#PAT-甲级-1050-String-Subtraction" class="headerlink" title="PAT 甲级 1050 String Subtraction"></a>PAT 甲级 1050 String Subtraction</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    string s1, s2;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s1);</span><br><span class="line">    <span class="built_in">getline</span>(cin, s2);</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">enable</span><span class="params">(<span class="number">256</span>, <span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : s2) &#123;</span><br><span class="line">        enable[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : s1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (enable[i])</span><br><span class="line">            cout &lt;&lt; i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1048 Find Coins 二分的写法</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201048%20Find%20Coins%20%E4%BA%8C%E5%88%86%E7%9A%84%E5%86%99%E6%B3%95/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201048%20Find%20Coins%20%E4%BA%8C%E5%88%86%E7%9A%84%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1048-Find-Coins-二分的写法"><a href="#PAT-甲级-1048-Find-Coins-二分的写法" class="headerlink" title="PAT 甲级 1048 Find Coins 二分的写法"></a>PAT 甲级 1048 Find Coins 二分的写法</h2><p>散列的写法非常简单明了，LeetCode Problem List很前面就有类似的题。其实这道题用二分实现也是可以的，下面是二分的写法。之后准备做一个二分的专题总结。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> N, M;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">coins</span><span class="params">(N)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : coins) cin &gt;&gt; i;</span><br><span class="line">    <span class="built_in">sort</span>(coins.<span class="built_in">begin</span>(), coins.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> need_to_find = M - coins[i];</span><br><span class="line">        <span class="comment">// 二分, 找到第一个大于等于need_to_find的数</span></span><br><span class="line">        <span class="comment">// 对于重复元素，第一次走到这里的时候会退出，但是下面的判断beg==i过不了</span></span><br><span class="line">        <span class="comment">// 然后i+1，下一次判断的时候得到的beg仍然是第i位的，所以没有问题</span></span><br><span class="line">        <span class="keyword">int</span> beg = <span class="number">0</span>, end = N, mid;</span><br><span class="line">        <span class="keyword">while</span> (beg &lt; end) &#123;</span><br><span class="line">            mid = beg + (end - beg) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (coins[mid] &lt; need_to_find) &#123;</span><br><span class="line">                beg = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                end = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (coins[beg] == need_to_find &amp;&amp; beg != i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, coins[i], coins[beg]);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;No Solution&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1049 Counting Ones</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201049%20Counting%20Ones/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201049%20Counting%20Ones/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1049-Counting-Ones"><a href="#PAT-甲级-1049-Counting-Ones" class="headerlink" title="PAT 甲级 1049 Counting Ones"></a>PAT 甲级 1049 Counting Ones</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">to_int</span><span class="params">(string s, <span class="keyword">int</span> beg, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = beg; i &lt; end; ++i) &#123;</span><br><span class="line">        ans = ans * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// aaaxbbb，对于x的位取到1，分为三类讨论</span></span><br><span class="line">    <span class="comment">// x == 1 时，有aaa*1000+bbb+1种情况</span></span><br><span class="line">    <span class="comment">// x &gt; 1 时，有(aaa+1)*1000种情况</span></span><br><span class="line">    <span class="comment">// x == 0 时，有aaa*1000种情况</span></span><br><span class="line">    string num;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> weishu = num.<span class="built_in">size</span>() - i;</span><br><span class="line">        <span class="comment">// 有些编译器pow出来会差0.00...1, 所以要round一下</span></span><br><span class="line">        <span class="keyword">if</span> (num[i] - <span class="string">&#x27;0&#x27;</span> &gt; <span class="number">1</span>)</span><br><span class="line">            ans += ((<span class="built_in">to_int</span>(num, <span class="number">0</span>, i) + <span class="number">1</span>) * <span class="built_in">round</span>(<span class="built_in">pow</span>(<span class="number">10</span>, weishu - <span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (num[i] - <span class="string">&#x27;0&#x27;</span> == <span class="number">1</span>)</span><br><span class="line">            ans += ((<span class="built_in">to_int</span>(num, <span class="number">0</span>, i) * <span class="built_in">round</span>(<span class="built_in">pow</span>(<span class="number">10</span>, weishu - <span class="number">1</span>)) +</span><br><span class="line">                     <span class="built_in">to_int</span>(num, i + <span class="number">1</span>, num.<span class="built_in">size</span>())) +</span><br><span class="line">                    <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (num[i] - <span class="string">&#x27;0&#x27;</span> == <span class="number">0</span>)</span><br><span class="line">            ans += ((<span class="built_in">to_int</span>(num, <span class="number">0</span>, i)) * <span class="built_in">round</span>(<span class="built_in">pow</span>(<span class="number">10</span>, weishu - <span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1055 The World‘s Richest</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201055%20The%20World%E2%80%98s%20Richest/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201055%20The%20World%E2%80%98s%20Richest/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1055-The-World’s-Richest"><a href="#PAT-甲级-1055-The-World’s-Richest" class="headerlink" title="PAT 甲级 1055 The World’s Richest"></a>PAT 甲级 1055 The World’s Richest</h2><p>这道题一次AC，但是后来看《算法笔记·上机训练实战指南》中的解析，说由于M&lt;100，所以每个年龄读入100个人，就可以不读入了，这样能显著提高时间，<strong>否则测试点二过不了</strong>。但是<strong>没有写这个预处理也过了</strong>，回去看了看时间是400ms，猜想应该是传参都用的是传引用调用，改成传值调用之后果然超时。</p><p>解析也是用传值调用写的，传引用不香吗。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Man</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name_;</span><br><span class="line">    <span class="keyword">int</span> age_;</span><br><span class="line">    <span class="keyword">int</span> net_worth_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Man &amp;lhs, <span class="keyword">const</span> Man &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lhs.net_worth_ != rhs.net_worth_)</span><br><span class="line">        <span class="keyword">return</span> lhs.net_worth_ &gt; rhs.net_worth_;</span><br><span class="line">    <span class="keyword">if</span> (lhs.age_ != rhs.age_)</span><br><span class="line">        <span class="keyword">return</span> lhs.age_ &lt; rhs.age_;</span><br><span class="line">    <span class="keyword">return</span> lhs.name_ &lt; rhs.name_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n, k; cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="function">vector&lt;Man&gt; <span class="title">man_set</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : man_set)cin &gt;&gt; i.name_ &gt;&gt; i.age_ &gt;&gt; i.net_worth_;</span><br><span class="line">    <span class="built_in">sort</span>(man_set.<span class="built_in">begin</span>(), man_set.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">int</span> case_ctr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (k--) &#123;</span><br><span class="line">        <span class="keyword">int</span> num, min_age, max_age; cin &gt;&gt; num &gt;&gt; min_age &gt;&gt; max_age;</span><br><span class="line">        <span class="keyword">bool</span> is_print = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case #%d:\n&quot;</span>, ++case_ctr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : man_set) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.age_ &lt;= max_age &amp;&amp; i.age_ &gt;= min_age) &#123;</span><br><span class="line">                cout &lt;&lt; i.name_ &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.age_ &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.net_worth_ &lt;&lt; endl;</span><br><span class="line">                is_print = <span class="literal">true</span>;</span><br><span class="line">                num--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!is_print)cout &lt;&lt; <span class="string">&quot;None&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1054 The Dominant Color 十一行最短解法（也是最快）</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201054%20The%20Dominant%20Color%20%E5%8D%81%E4%B8%80%E8%A1%8C%E6%9C%80%E7%9F%AD%E8%A7%A3%E6%B3%95%EF%BC%88%E4%B9%9F%E6%98%AF%E6%9C%80%E5%BF%AB%EF%BC%89/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201054%20The%20Dominant%20Color%20%E5%8D%81%E4%B8%80%E8%A1%8C%E6%9C%80%E7%9F%AD%E8%A7%A3%E6%B3%95%EF%BC%88%E4%B9%9F%E6%98%AF%E6%9C%80%E5%BF%AB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1054-The-Dominant-Color"><a href="#PAT-甲级-1054-The-Dominant-Color" class="headerlink" title="PAT 甲级 1054 The Dominant Color"></a>PAT 甲级 1054 The Dominant Color</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> M,N;cin&gt;&gt;M&gt;&gt;N;</span><br><span class="line">    <span class="keyword">int</span> half=M/<span class="number">2</span>*N;</span><br><span class="line">    map&lt;string,<span class="keyword">int</span>&gt; mp;string tmp;</span><br><span class="line">    <span class="keyword">while</span>(M--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">            cin&gt;&gt;tmp;</span><br><span class="line">            mp[tmp]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:mp)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i.second&gt;half)</span><br><span class="line">            cout&lt;&lt;i.first&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另一种思路，如果相同就令计数ctr++，否则抵消；由于所求数字出现次数大于一半，所以全部抵消之后一定只剩下所求数字。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M,N;cin&gt;&gt;M&gt;&gt;N;</span><br><span class="line">    <span class="keyword">int</span> ctr=<span class="number">0</span>,now,next;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ctr==<span class="number">0</span>) now=next;</span><br><span class="line">        now==next ? ++ctr:--ctr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,now);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1052 Linked List Sorting</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201052%20Linked%20List%20Sorting/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201052%20Linked%20List%20Sorting/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1052-Linked-List-Sorting"><a href="#PAT-甲级-1052-Linked-List-Sorting" class="headerlink" title="PAT 甲级 1052 Linked List Sorting"></a>PAT 甲级 1052 Linked List Sorting</h2><p>测试点4是空链，数据形如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 -1</span><br><span class="line">00001 100 -1</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kMAXN = <span class="number">100000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> address, data, next, order&#123;<span class="number">-1</span>&#125;;</span><br><span class="line">&#125; node[kMAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node&amp; a, <span class="keyword">const</span> Node&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.order == <span class="number">-1</span> || b.order == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> a.order &gt; b.order;</span><br><span class="line">    <span class="keyword">return</span> a.data &lt; b.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> N, head;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0 -1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node tmp;</span><br><span class="line">    <span class="keyword">while</span> (N--) &#123;</span><br><span class="line">        cin &gt;&gt; tmp.address &gt;&gt; tmp.data &gt;&gt; tmp.next;</span><br><span class="line">        node[tmp.address] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ctr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="number">-1</span>) &#123;</span><br><span class="line">        node[head].order = (ctr++);</span><br><span class="line">        head = node[head].next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(node, node + kMAXN, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %05d\n&quot;</span>, ctr, node[<span class="number">0</span>].address);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ctr; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != ctr - <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>, node[i].address, node[i].data, node[i + <span class="number">1</span>].address);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1\n&quot;</span>, node[i].address, node[i].data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1061 Dating</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201061%20Dating/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201061%20Dating/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1061-Dating"><a href="#PAT-甲级-1061-Dating" class="headerlink" title="PAT 甲级 1061 Dating"></a>PAT 甲级 1061 Dating</h2><p>注意不能用isupper，因为不是所有大写字母都有效。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="keyword">char</span>, string&gt; which_day_in_a_week&#123;</span><br><span class="line">    &#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&quot;MON&quot;</span>&#125;,&#123;<span class="string">&#x27;B&#x27;</span>,<span class="string">&quot;TUE&quot;</span>&#125;,&#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&quot;WED&quot;</span>&#125;,&#123;<span class="string">&#x27;D&#x27;</span>,<span class="string">&quot;THU&quot;</span>&#125;,&#123;<span class="string">&#x27;E&#x27;</span>,<span class="string">&quot;FRI&quot;</span>&#125;,&#123;<span class="string">&#x27;F&#x27;</span>,<span class="string">&quot;SAT&quot;</span>&#125;,&#123;<span class="string">&#x27;G&#x27;</span>,<span class="string">&quot;SUN&quot;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">map&lt;<span class="keyword">char</span>, string&gt; hh&#123;</span><br><span class="line">    &#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&quot;00&quot;</span>&#125;,&#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&quot;01&quot;</span>&#125;,&#123;<span class="string">&#x27;2&#x27;</span>,<span class="string">&quot;02&quot;</span>&#125;,&#123;<span class="string">&#x27;3&#x27;</span>,<span class="string">&quot;03&quot;</span>&#125;,&#123;<span class="string">&#x27;4&#x27;</span>,<span class="string">&quot;04&quot;</span>&#125;,&#123;<span class="string">&#x27;5&#x27;</span>,<span class="string">&quot;05&quot;</span>&#125;,&#123;<span class="string">&#x27;6&#x27;</span>,<span class="string">&quot;06&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;7&#x27;</span>,<span class="string">&quot;07&quot;</span>&#125;,&#123;<span class="string">&#x27;8&#x27;</span>,<span class="string">&quot;08&quot;</span>&#125;,&#123;<span class="string">&#x27;9&#x27;</span>,<span class="string">&quot;09&quot;</span>&#125;,&#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&quot;10&quot;</span>&#125;,&#123;<span class="string">&#x27;B&#x27;</span>,<span class="string">&quot;11&quot;</span>&#125;,&#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&quot;12&quot;</span>&#125;,&#123;<span class="string">&#x27;D&#x27;</span>,<span class="string">&quot;13&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;E&#x27;</span>,<span class="string">&quot;14&quot;</span>&#125;,&#123;<span class="string">&#x27;F&#x27;</span>,<span class="string">&quot;15&quot;</span>&#125;,&#123;<span class="string">&#x27;G&#x27;</span>,<span class="string">&quot;16&quot;</span>&#125;,&#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&quot;17&quot;</span>&#125;,&#123;<span class="string">&#x27;I&#x27;</span>,<span class="string">&quot;18&quot;</span>&#125;,&#123;<span class="string">&#x27;J&#x27;</span>,<span class="string">&quot;19&quot;</span>&#125;,&#123;<span class="string">&#x27;K&#x27;</span>,<span class="string">&quot;20&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&quot;21&quot;</span>&#125;,&#123;<span class="string">&#x27;M&#x27;</span>,<span class="string">&quot;22&quot;</span>&#125;,&#123;<span class="string">&#x27;N&#x27;</span>,<span class="string">&quot;23&quot;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    string s1, s2, s3, s4; cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; s3 &gt;&gt; s4;</span><br><span class="line">    <span class="keyword">int</span> sz1 = (s1.<span class="built_in">size</span>() &lt; s2.<span class="built_in">size</span>() ? s1.<span class="built_in">size</span>() : s2.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//星期</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz1; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[i] == s2[i] &amp;&amp; s1[i] &gt;= <span class="string">&#x27;A&#x27;</span>&amp;&amp;s1[i] &lt;= <span class="string">&#x27;G&#x27;</span>) &#123;</span><br><span class="line">            cout &lt;&lt; which_day_in_a_week[s1[i]] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//小时</span></span><br><span class="line">    ++i;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; sz1; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[i] == s2[i] &amp;&amp; (<span class="built_in">isdigit</span>(s1[i]) || (s1[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s1[i] &lt;= <span class="string">&#x27;N&#x27;</span>))) &#123;</span><br><span class="line">            cout &lt;&lt; hh[s1[i]] &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分钟</span></span><br><span class="line">    <span class="keyword">int</span> sz2 = (s3.<span class="built_in">size</span>() &lt; s4.<span class="built_in">size</span>() ? s3.<span class="built_in">size</span>() : s4.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz2; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s3[i] == s4[i] &amp;&amp; <span class="built_in">isalpha</span>(s3[i])) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%02d\n&quot;</span>, i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1059 Prime Factors</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201059%20Prime%20Factors/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201059%20Prime%20Factors/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1059-Prime-Factors"><a href="#PAT-甲级-1059-Prime-Factors" class="headerlink" title="PAT 甲级 1059 Prime Factors"></a>PAT 甲级 1059 Prime Factors</h2><p>素数表的获取和素因子的获取</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 素数表及其初始化</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kPRIME_SIZE = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">bool</span> is_prime[kPRIME_SIZE];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitPrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(is_prime, <span class="literal">true</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(is_prime));</span><br><span class="line">    is_prime[<span class="number">0</span>] = <span class="literal">false</span>, is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; kPRIME_SIZE; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_prime[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i * <span class="number">2</span>; j &lt; kPRIME_SIZE; j += i) &#123;</span><br><span class="line">                is_prime[j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分解质因子</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PrimeFactor</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>, ctr = <span class="number">0</span>;</span><br><span class="line">&#125; prime_factor[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetPrimeFactor</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(n)); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_prime[i] &amp;&amp; n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            prime_factor[++pos].val = i;</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                ++prime_factor[pos].ctr;</span><br><span class="line">                n /= i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">        prime_factor[++pos] = &#123;n, <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">InitPrime</span>();</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> num;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="built_in">GetPrimeFactor</span>(num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld=&quot;</span>, num);</span><br><span class="line">    <span class="keyword">int</span> ctr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prime_factor[i].ctr != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ctr != <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;*&quot;</span>;</span><br><span class="line">            cout &lt;&lt; prime_factor[i].val;</span><br><span class="line">            <span class="keyword">if</span> (prime_factor[i].ctr != <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;^%d&quot;</span>, prime_factor[i].ctr);</span><br><span class="line">            ++ctr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 特判</span></span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>) cout &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1056 Mice and Rice</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201056%20Mice%20and%20Rice/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201056%20Mice%20and%20Rice/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1056-Mice-and-Rice"><a href="#PAT-甲级-1056-Mice-and-Rice" class="headerlink" title="PAT 甲级 1056 Mice and Rice"></a>PAT 甲级 1056 Mice and Rice</h2><p>维护一个队列，每一组中晋级的老鼠重新加入队尾，到一轮结束之后，队列中剩下的就是下一轮需要进行比赛的老鼠。</p><p>关键之处是可以通过剩余人数算出当前排名。假设剩余人数为M，每一组为k人，那么一共有k组（M%k==0）或者k+1组（M%k!=0）,所以这一轮淘汰的人的排名分别为k+1（M%k==0）或者（M%k!=0）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mouse</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">int</span> rank;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> N, k;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; k;</span><br><span class="line">    <span class="function">vector&lt;Mouse&gt; <span class="title">mouses</span><span class="params">(N)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; mouses[i].weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    queue&lt;Mouse*&gt; q;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; tmp;</span><br><span class="line">        q.<span class="built_in">push</span>(&amp;mouses[tmp]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mouses_num_this_turn, rank_now, max_weight = <span class="number">-1</span>;</span><br><span class="line">    Mouse* biggest = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        mouses_num_this_turn = q.<span class="built_in">size</span>();</span><br><span class="line">        rank_now = (mouses_num_this_turn + k - <span class="number">1</span>) / k + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mouses_num_this_turn; i += k) &#123;</span><br><span class="line">            max_weight = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k &amp;&amp; j + i &lt; mouses_num_this_turn; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (max_weight &lt; q.<span class="built_in">front</span>()-&gt;weight) &#123;</span><br><span class="line">                    biggest    = q.<span class="built_in">front</span>();</span><br><span class="line">                    max_weight = q.<span class="built_in">front</span>()-&gt;weight;</span><br><span class="line">                &#125;</span><br><span class="line">                q.<span class="built_in">front</span>()-&gt;rank = rank_now;</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            q.<span class="built_in">push</span>(biggest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q.<span class="built_in">front</span>()-&gt;rank = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; mouses[i].rank;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1060 Are They Equal</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201060%20Are%20They%20Equal/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201060%20Are%20They%20Equal/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1060-Are-They-Equal"><a href="#PAT-甲级-1060-Are-They-Equal" class="headerlink" title="PAT 甲级 1060 Are They Equal"></a>PAT 甲级 1060 Are They Equal</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Number</span> &#123;</span></span><br><span class="line">    string fractional_part;</span><br><span class="line">    <span class="keyword">int</span> point_pos&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Number</span>(<span class="keyword">const</span> string s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> has_find_point = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!has_find_point)</span><br><span class="line">                    ++point_pos;</span><br><span class="line">                fractional_part.<span class="built_in">push_back</span>(s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                has_find_point = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除前置0</span></span><br><span class="line">        <span class="built_in">reverse</span>(fractional_part.<span class="built_in">begin</span>(), fractional_part.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">while</span> (fractional_part.<span class="built_in">back</span>() == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            fractional_part.<span class="built_in">pop_back</span>();</span><br><span class="line">            --point_pos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(fractional_part.<span class="built_in">begin</span>(), fractional_part.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 特判 00.000 这种情况，此时不特判就会出错, 如数据 4 0000 00.00000</span></span><br><span class="line">        <span class="keyword">int</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : fractional_part) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="string">&#x27;0&#x27;</span>) flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) point_pos = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Number <span class="title">Change</span><span class="params">(<span class="keyword">int</span> digits)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Number ans = *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (digits &gt; ans.fractional_part.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">while</span> (digits != ans.fractional_part.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                ans.fractional_part.<span class="built_in">push_back</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans.fractional_part = fractional_part.<span class="built_in">substr</span>(<span class="number">0</span>, digits);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Number&amp; rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (rhs.fractional_part == fractional_part &amp;&amp; rhs.point_pos == point_pos)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0.%s*10^%d&quot;</span>, fractional_part.<span class="built_in">c_str</span>(), point_pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    string a_, b_;</span><br><span class="line">    cin &gt;&gt; d &gt;&gt; a_ &gt;&gt; b_;</span><br><span class="line">    <span class="keyword">auto</span> a = <span class="built_in">Number</span>(a_).<span class="built_in">Change</span>(d);</span><br><span class="line">    <span class="keyword">auto</span> b = <span class="built_in">Number</span>(b_).<span class="built_in">Change</span>(d);</span><br><span class="line">    <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;YES &quot;</span>); a.<span class="built_in">Print</span>(); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;NO &quot;</span>); a.<span class="built_in">Print</span>(); <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>); b.<span class="built_in">Print</span>(); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1062 Talent and Virtue</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201062%20Talent%20and%20Virtue/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201062%20Talent%20and%20Virtue/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1062-Talent-and-Virtue"><a href="#PAT-甲级-1062-Talent-and-Virtue" class="headerlink" title="PAT 甲级 1062 Talent and Virtue"></a>PAT 甲级 1062 Talent and Virtue</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//type_ == 0 is small man; type_ == 1 is fool man;</span></span><br><span class="line"><span class="comment">//type_ == 2 is noblemen; type_ == 3 is sages;</span></span><br><span class="line"><span class="comment">//type_ == -1 is defualt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">People</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string ID_number_;</span><br><span class="line">    <span class="keyword">int</span> virtue_grade_&#123; <span class="number">-1</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> talent_grade_&#123; <span class="number">-1</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> type_&#123; <span class="number">-1</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> People &amp;lhs, <span class="keyword">const</span> People &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lhs.type_ != rhs.type_)</span><br><span class="line">        <span class="keyword">return</span> lhs.type_ &gt; rhs.type_;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((lhs.virtue_grade_ + lhs.talent_grade_) != (rhs.virtue_grade_ + rhs.talent_grade_))</span><br><span class="line">        <span class="built_in"><span class="keyword">return</span></span> (lhs.virtue_grade_ + lhs.talent_grade_) &gt; (rhs.virtue_grade_ + rhs.talent_grade_);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (lhs.virtue_grade_ != rhs.virtue_grade_)</span><br><span class="line">        <span class="keyword">return</span> lhs.virtue_grade_ &gt; rhs.virtue_grade_;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> lhs.ID_number_ &lt; rhs.ID_number_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> total_number_to_rank, lower_bound_grade, high_bound_grade;</span><br><span class="line">    cin &gt;&gt; total_number_to_rank &gt;&gt; lower_bound_grade &gt;&gt; high_bound_grade;</span><br><span class="line">    <span class="keyword">int</span> ranked_ctr = <span class="number">0</span>; vector&lt;People&gt; ranked_set;</span><br><span class="line">    string ID_number; <span class="keyword">int</span> virtue_grade, talent_grade, type;</span><br><span class="line">    <span class="keyword">while</span> (total_number_to_rank--) &#123;</span><br><span class="line">        cin &gt;&gt; ID_number &gt;&gt; virtue_grade &gt;&gt; talent_grade;</span><br><span class="line">        <span class="keyword">if</span> (virtue_grade &gt;= lower_bound_grade &amp;&amp; talent_grade &gt;= lower_bound_grade) &#123;</span><br><span class="line">            <span class="keyword">if</span> (virtue_grade &gt;= high_bound_grade &amp;&amp; talent_grade &gt;= high_bound_grade) type = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (virtue_grade &gt;= high_bound_grade &amp;&amp; talent_grade &lt; high_bound_grade) type = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (virtue_grade &gt;= talent_grade) type = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> type = <span class="number">0</span>;</span><br><span class="line">            ranked_set.<span class="built_in">push_back</span>(&#123; ID_number,virtue_grade,talent_grade,type &#125;);</span><br><span class="line">            ++ranked_ctr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ranked_set.<span class="built_in">begin</span>(), ranked_set.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    cout &lt;&lt; ranked_ctr &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : ranked_set) cout &lt;&lt; i.ID_number_ &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.virtue_grade_ &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.talent_grade_ &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1063 Set Similarity</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201063%20Set%20Similarity/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201063%20Set%20Similarity/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1063-Set-Similarity"><a href="#PAT-甲级-1063-Set-Similarity" class="headerlink" title="PAT 甲级 1063 Set Similarity"></a>PAT 甲级 1063 Set Similarity</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> M;cin&gt;&gt;M;</span><br><span class="line">    vector&lt;set&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">sets</span>(M+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;++i)&#123; </span><br><span class="line">        <span class="keyword">int</span> n,tmp;cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            cin&gt;&gt;tmp;</span><br><span class="line">            sets[i].<span class="built_in">insert</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> K;cin&gt;&gt;K;</span><br><span class="line">    <span class="keyword">while</span>(K--)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">double</span> total_num=sets[b].<span class="built_in">size</span>(),same_num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:sets[a])&#123;</span><br><span class="line">            <span class="keyword">if</span>(sets[b].<span class="built_in">find</span>(i)!=sets[b].<span class="built_in">end</span>()) ++same_num;</span><br><span class="line">            <span class="keyword">else</span> ++total_num;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.1f%%\n&quot;</span>,same_num/total_num*<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1069 The Black Hole of Numbers</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201069%20The%20Black%20Hole%20of%20Numbers/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201069%20The%20Black%20Hole%20of%20Numbers/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1069-The-Black-Hole-of-Numbers"><a href="#PAT-甲级-1069-The-Black-Hole-of-Numbers" class="headerlink" title="PAT 甲级 1069 The Black Hole of Numbers"></a>PAT 甲级 1069 The Black Hole of Numbers</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">to_int</span><span class="params">(string x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        ans = ans * <span class="number">10</span> + x[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">to_str</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans.<span class="built_in">reserve</span>();</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        string num_s = <span class="built_in">to_str</span>(num);</span><br><span class="line">        <span class="built_in">sort</span>(num_s.<span class="built_in">begin</span>(), num_s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> small = <span class="built_in">to_int</span>(num_s);</span><br><span class="line">        <span class="built_in">sort</span>(num_s.<span class="built_in">rbegin</span>(), num_s.<span class="built_in">rend</span>());</span><br><span class="line">        <span class="keyword">int</span> big = <span class="built_in">to_int</span>(num_s);</span><br><span class="line">        num     = big - small;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%04d - %04d = %04d\n&quot;</span>, big, small, num);</span><br><span class="line">    &#125; <span class="keyword">while</span> (num != <span class="number">0</span> &amp;&amp; num != <span class="number">6174</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1070 Mooncake</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201070%20Mooncake/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201070%20Mooncake/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1070-Mooncake"><a href="#PAT-甲级-1070-Mooncake" class="headerlink" title="PAT 甲级 1070 Mooncake"></a>PAT 甲级 1070 Mooncake</h2><p>贪心算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MoonCake</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> storage;</span><br><span class="line">    <span class="keyword">double</span> total_price;</span><br><span class="line">    <span class="keyword">double</span> single_price;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> MoonCake&amp; a, <span class="keyword">const</span> MoonCake&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.single_price &gt; b.single_price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> kinds;</span><br><span class="line">    <span class="keyword">double</span> D;</span><br><span class="line">    cin &gt;&gt; kinds &gt;&gt; D;</span><br><span class="line">    <span class="function">vector&lt;MoonCake&gt; <span class="title">moon_cake</span><span class="params">(kinds)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : moon_cake) cin &gt;&gt; i.storage;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : moon_cake) cin &gt;&gt; i.total_price;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : moon_cake) i.single_price = i.total_price / i.storage;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">begin</span>(moon_cake), <span class="built_in">end</span>(moon_cake), cmp);</span><br><span class="line">    <span class="keyword">double</span> profit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : moon_cake) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i.storage &lt;= D) &#123;</span><br><span class="line">            D -= i.storage;</span><br><span class="line">            profit += i.total_price;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            profit += D * i.single_price;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>, profit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1067 Sort with Swap(0, i)</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201067%20Sort%20with%20Swap(0,%20i)/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201067%20Sort%20with%20Swap(0,%20i)/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1067-Sort-with-Swap-0-i"><a href="#PAT-甲级-1067-Sort-with-Swap-0-i" class="headerlink" title="PAT 甲级 1067 Sort with Swap(0, i)"></a>PAT 甲级 1067 Sort with Swap(0, i)</h2><p><img src="https://img-blog.csdnimg.cn/20210404212836974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE5MTc3NDU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805403651522560">原题链接</a></p><p>大意是只能用交换0和其他数字的操作，对乱序的0~N-1进行排序，问最少需要多少次数。</p><p>这道本来是贪心算法的题，但是有趣就有趣在还可以用不相交集来理解，从而有了下面的写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">num</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>&amp; i : num) cin &gt;&gt; i;</span><br><span class="line">    <span class="comment">// 由于元素是唯一的，没有重复，自然就形成了一些等价类。</span></span><br><span class="line">    <span class="comment">// 这些等价类表现为一个个环</span></span><br><span class="line">    <span class="comment">// 而且他们可以被分为两类：需要重排的等价类和不需要重排的等价类（只有一个元素的自环）</span></span><br><span class="line">    <span class="comment">// 用ctr_group表示需要重排的等价类个数</span></span><br><span class="line">    <span class="comment">// 用ctr_num表示需要排序的类中的元素个数之和</span></span><br><span class="line">    <span class="comment">// ctr_num==0的时候当然不需要交换，直接输出0即可</span></span><br><span class="line">    <span class="comment">// ctr_num不等于0的时候，需要看0是否指向自己（自成一个等价类）（因为0是用来进行操作的元素，所以比较特殊）</span></span><br><span class="line">    <span class="comment">// 0在需要交换的等价类里面的时候交换次数就是(ctr_num-1)+(ctr_gruop-1)</span></span><br><span class="line">    <span class="comment">// 0自己指向自己,并且ctr_num != 0也就是存在需要交换的等价类时，交换次数是(ctr_num-1)+(ctr_gruop-1)+2</span></span><br><span class="line">    <span class="comment">// 加的2分别是0交换出去和0交换回来两次</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">has_checked</span><span class="params">(n, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> ctr_group = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ctr_num   = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (has_checked[num[i]] || num[i] == i)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> j = num[i];</span><br><span class="line">            <span class="keyword">while</span> (!has_checked[j]) &#123;</span><br><span class="line">                has_checked[j] = <span class="literal">true</span>;</span><br><span class="line">                j              = num[j];</span><br><span class="line">                ++ctr_num;</span><br><span class="line">            &#125;</span><br><span class="line">            ++ctr_group;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ctr_num == <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (num[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; ctr_num + ctr_group;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; ctr_num + ctr_group - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上贪心算法的解法和思路</p><p>一次交换最多能够使得除开0之外的一个元素归位，这个元素就是0所在的序号。比如用例中，0在7号位置，那么第一次交换肯定能把7复位。贪心的思路就是每次都尽量让一个元素归位。什么时候是例外呢？就是0在0号位置但还没有排序完成的情况。这个时候需要让0和没有排序完成的数字进行一次交换，从而可以继续上面的过程，直到排序完成。于是就有了下面贪心（和模拟）的写法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> pos[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> left = n - <span class="number">1</span>, num;  <span class="comment">// left存放除了0之外不在本位上的数的个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">        pos[num] = i;                <span class="comment">// num所处的位置为i</span></span><br><span class="line">        <span class="keyword">if</span> (num == i &amp;&amp; num != <span class="number">0</span>) &#123;  <span class="comment">// 如果除0之外有在本位上的数字</span></span><br><span class="line">            --left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;          <span class="comment">// k存在除0以外不在本位上的最小的数字</span></span><br><span class="line">    <span class="keyword">while</span> (left &gt; <span class="number">0</span>) &#123;  <span class="comment">// 只要有数字不在本位上</span></span><br><span class="line">        <span class="comment">// 如果0在本位上，寻找一个当前不在本位上的数与0交换</span></span><br><span class="line">        <span class="keyword">if</span> (pos[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (k &lt; n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pos[k] != k) &#123;</span><br><span class="line">                    std::<span class="built_in">swap</span>(pos[<span class="number">0</span>], pos[k]);</span><br><span class="line">                    ++ans;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ++k;  <span class="comment">// 判断k是否在本位</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只要0不在本位，就把0所在位置的数的当前位置与0的位置交换</span></span><br><span class="line">        <span class="keyword">while</span> (pos[<span class="number">0</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">            std::<span class="built_in">swap</span>(pos[<span class="number">0</span>], pos[pos[<span class="number">0</span>]]);</span><br><span class="line">            ++ans;</span><br><span class="line">            --left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1071 Speech Patterns</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201071%20Speech%20Patterns/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201071%20Speech%20Patterns/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1071-Speech-Patterns"><a href="#PAT-甲级-1071-Speech-Patterns" class="headerlink" title="PAT 甲级 1071 Speech Patterns"></a>PAT 甲级 1071 Speech Patterns</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsValid</span><span class="params">(<span class="keyword">char</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((<span class="string">&#x27;0&#x27;</span>&lt;=a&amp;&amp;a&lt;=<span class="string">&#x27;9&#x27;</span>)||(<span class="string">&#x27;A&#x27;</span>&lt;=a&amp;&amp;a&lt;=<span class="string">&#x27;Z&#x27;</span>)||(<span class="string">&#x27;a&#x27;</span>&lt;=a&amp;&amp;a&lt;=<span class="string">&#x27;z&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    map&lt;string,<span class="keyword">int</span>&gt; mp;</span><br><span class="line">    string s;<span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">while</span>(tmp=cin.<span class="built_in">get</span>(),tmp!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">IsValid</span>(tmp))</span><br><span class="line">            s.<span class="built_in">push_back</span>(<span class="built_in">tolower</span>(tmp));</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            mp[s]++; s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mp[<span class="string">&quot;&quot;</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> ctr=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:mp)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i.second&gt;ctr)&#123;</span><br><span class="line">            s=i.first;</span><br><span class="line">            ctr=i.second;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ctr&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1073 Scientific Notation</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201073%20Scientific%20Notation/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201073%20Scientific%20Notation/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1073-Scientific-Notation"><a href="#PAT-甲级-1073-Scientific-Notation" class="headerlink" title="PAT 甲级 1073 Scientific Notation"></a>PAT 甲级 1073 Scientific Notation</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">//分成整数部分，小数部分和幂次.</span></span><br><span class="line">    <span class="keyword">int</span> zhengshu_part; string xiaoshu_part; <span class="keyword">int</span> times;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d.&quot;</span>, &amp;zhengshu_part);</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">while</span> (tmp = <span class="built_in">getchar</span>(), tmp != <span class="string">&#x27;E&#x27;</span>) &#123;</span><br><span class="line">        xiaoshu_part.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;times);</span><br><span class="line">    <span class="comment">//正负号.</span></span><br><span class="line">    <span class="keyword">if</span> (zhengshu_part &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">        zhengshu_part = <span class="built_in">abs</span>(zhengshu_part);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//幂次大于0，小数点右移动，分补零和不补两种.</span></span><br><span class="line">    <span class="keyword">if</span> (times &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (times &gt;= xiaoshu_part.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d%s&quot;</span>, zhengshu_part, xiaoshu_part.<span class="built_in">c_str</span>());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times - xiaoshu_part.<span class="built_in">size</span>(); ++i) cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, zhengshu_part);</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; times; ++i) &#123;</span><br><span class="line">                cout &lt;&lt; xiaoshu_part[i];</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;.&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; xiaoshu_part.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                cout &lt;&lt; xiaoshu_part[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//幂次等于0.</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (times == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d.%s&quot;</span>, zhengshu_part, xiaoshu_part.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//幂次小于0，小数点左移.</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">abs</span>(times); ++i) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;.&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%s&quot;</span>, zhengshu_part, xiaoshu_part.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1077 Kuchiguse</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201077%20Kuchiguse/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201077%20Kuchiguse/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1077-Kuchiguse"><a href="#PAT-甲级-1077-Kuchiguse" class="headerlink" title="PAT 甲级 1077 Kuchiguse"></a>PAT 甲级 1077 Kuchiguse</h2><p>这道题原来是这样做的呐~<br>呐呐~<br>真简单呐~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n; cin.<span class="built_in">get</span>();</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">str_set</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> min_str_size = <span class="number">9999</span>;</span><br><span class="line">    <span class="comment">//reverse一下，后缀变成前缀更方便比较呐~</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">getline</span>(cin, str_set[i]);</span><br><span class="line">        <span class="built_in">reverse</span>(str_set[i].<span class="built_in">begin</span>(), str_set[i].<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">if</span> (str_set[i].<span class="built_in">size</span>() &lt; min_str_size) min_str_size = str_set[i].<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    string suffix;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; min_str_size; ++i) &#123;</span><br><span class="line">        <span class="keyword">char</span> charactar = str_set[<span class="number">0</span>][i];</span><br><span class="line">        <span class="keyword">bool</span> is_suffix_charartar = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str_set[j][i] != charactar) &#123;</span><br><span class="line">                is_suffix_charartar = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_suffix_charartar) suffix.<span class="built_in">push_back</span>(charactar);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(suffix.<span class="built_in">begin</span>(), suffix.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span> (suffix.<span class="built_in">size</span>() == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;nai&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; suffix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1074 Reversing Linked List</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201074%20Reversing%20Linked%20List/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201074%20Reversing%20Linked%20List/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1074-Reversing-Linked-List"><a href="#PAT-甲级-1074-Reversing-Linked-List" class="headerlink" title="PAT 甲级 1074 Reversing Linked List"></a>PAT 甲级 1074 Reversing Linked List</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> address, data, next;</span><br><span class="line">&#125; node[<span class="number">100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> head, num, k;</span><br><span class="line">    cin &gt;&gt; head &gt;&gt; num &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a, v, n;</span><br><span class="line">    <span class="keyword">while</span> (num--) &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; v &gt;&gt; n;</span><br><span class="line">        node[a] = Node&#123;a, v, n&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;Node&gt; valid_node;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="number">-1</span>) &#123;</span><br><span class="line">        valid_node.<span class="built_in">push_back</span>(node[head]);</span><br><span class="line">        head = node[head].next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + k &lt;= valid_node.<span class="built_in">size</span>(); i += k) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(valid_node.<span class="built_in">begin</span>() + i, valid_node.<span class="built_in">begin</span>() + i + k);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valid_node.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> != valid_node.<span class="built_in">size</span>())</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>, valid_node[i].address, valid_node[i].data, valid_node[i + <span class="number">1</span>].address);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1\n&quot;</span>, valid_node[i].address, valid_node[i].data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1075 PAT Judge</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201075%20PAT%20Judge/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201075%20PAT%20Judge/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1075-PAT-Judge"><a href="#PAT-甲级-1075-PAT-Judge" class="headerlink" title="PAT 甲级 1075 PAT Judge"></a>PAT 甲级 1075 PAT Judge</h2><p>参考《算法笔记·上机训练实战指南》P113</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kMAXN = <span class="number">10010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id_;</span><br><span class="line">    <span class="keyword">int</span> score_[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">bool</span> is_valid_;</span><br><span class="line">    <span class="keyword">int</span> score_all_;</span><br><span class="line">    <span class="keyword">int</span> solve_;</span><br><span class="line">&#125;stu[kMAXN];</span><br><span class="line"><span class="comment">// 每道题满分。</span></span><br><span class="line"><span class="keyword">int</span> full[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> n, k, m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Student &amp;lhs, <span class="keyword">const</span> Student &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lhs.score_all_ != rhs.score_all_) <span class="keyword">return</span> lhs.score_all_ &gt; rhs.score_all_;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (lhs.solve_ != rhs.solve_) <span class="keyword">return</span> lhs.solve_ &gt; rhs.solve_;</span><br><span class="line">    <span class="keyword">return</span> lhs.id_ &lt; rhs.id_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化函数。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        stu[i].id_ = i;</span><br><span class="line">        stu[i].score_all_ = <span class="number">0</span>;</span><br><span class="line">        stu[i].solve_ = <span class="number">0</span>;</span><br><span class="line">        stu[i].is_valid_ = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">memset</span>(stu[i].score_, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(stu[i].score_));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k &gt;&gt; m;</span><br><span class="line">    <span class="built_in">Init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; full[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> u_id, p_id, score_obtained;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; u_id &gt;&gt; p_id &gt;&gt; score_obtained;</span><br><span class="line">        <span class="comment">// 编译通过，为有效user。</span></span><br><span class="line">        <span class="keyword">if</span> (score_obtained != <span class="number">-1</span>) &#123;</span><br><span class="line">            stu[u_id].is_valid_ = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一次编译出错，分数为0。</span></span><br><span class="line">        <span class="keyword">if</span> (score_obtained == <span class="number">-1</span> &amp;&amp; stu[u_id].score_[p_id] == <span class="number">-1</span>) &#123;</span><br><span class="line">            stu[u_id].score_[p_id] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一次满分，解决数加一。</span></span><br><span class="line">        <span class="keyword">if</span> (score_obtained == full[p_id] &amp;&amp; stu[u_id].score_[p_id] &lt; full[p_id]) &#123;</span><br><span class="line">            stu[u_id].solve_++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 分值更高，覆盖。</span></span><br><span class="line">        <span class="keyword">if</span> (score_obtained &gt; stu[u_id].score_[p_id]) &#123;</span><br><span class="line">            stu[u_id].score_[p_id] = score_obtained;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stu[i].score_[j] != <span class="number">-1</span>) &#123;</span><br><span class="line">                stu[i].score_all_ += stu[i].score_[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(stu + <span class="number">1</span>, stu + n + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">int</span> rank = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; stu[i].is_valid_; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; stu[i].score_all_ != stu[i - <span class="number">1</span>].score_all_) &#123;</span><br><span class="line">            rank = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %05d %d&quot;</span>, rank, stu[i].id_, stu[i].score_all_);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (stu[i].score_[j] == <span class="number">-1</span> ? (<span class="string">&quot;-&quot;</span>) : <span class="built_in">to_string</span>(stu[i].score_[j]));</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1078 Hashing</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201078%20Hashing/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201078%20Hashing/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1078-Hashing"><a href="#PAT-甲级-1078-Hashing" class="headerlink" title="PAT 甲级 1078 Hashing"></a>PAT 甲级 1078 Hashing</h2><p>考察素数表的获取和散列表的平方探测法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kPRIME_SIZE = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">bool</span> is_prime[kPRIME_SIZE];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitPrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(is_prime, <span class="literal">true</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(is_prime));</span><br><span class="line">    is_prime[<span class="number">0</span>] = <span class="literal">false</span>, is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; kPRIME_SIZE; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_prime[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i * <span class="number">2</span>; j &lt; kPRIME_SIZE; j += i) &#123;</span><br><span class="line">                is_prime[j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">InitPrime</span>();</span><br><span class="line">    <span class="keyword">int</span> m_size, n;</span><br><span class="line">    cin &gt;&gt; m_size &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (!is_prime[m_size]) ++m_size;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">hashtable</span><span class="params">(m_size, <span class="number">-1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        cin &gt;&gt; val;</span><br><span class="line">        <span class="keyword">int</span> pos = val % m_size;</span><br><span class="line">        <span class="keyword">int</span> step;</span><br><span class="line">        <span class="keyword">for</span> (step = <span class="number">0</span>; step &lt; m_size; ++step) &#123;</span><br><span class="line">            pos = (val + step * step) % m_size;</span><br><span class="line">            <span class="keyword">if</span> (hashtable[pos] == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="comment">// 插入成功</span></span><br><span class="line">                cout &lt;&lt; pos;</span><br><span class="line">                hashtable[pos] = val;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入失败</span></span><br><span class="line">        <span class="keyword">if</span> (step == m_size) cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1080 Graduate Admission</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201080%20Graduate%20Admission/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201080%20Graduate%20Admission/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1080-Graduate-Admission"><a href="#PAT-甲级-1080-Graduate-Admission" class="headerlink" title="PAT 甲级 1080 Graduate Admission"></a>PAT 甲级 1080 Graduate Admission</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> N, M, K;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id_;</span><br><span class="line">    <span class="keyword">int</span> grade_e_;</span><br><span class="line">    <span class="keyword">int</span> grade_i_;</span><br><span class="line">    <span class="keyword">double</span> final_grade_;</span><br><span class="line">    <span class="keyword">int</span> rank_;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; school_want_to_go_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Student &amp;lhs, <span class="keyword">const</span> Student &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(lhs.final_grade_ - rhs.final_grade_) &gt; <span class="number">1e-6</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.final_grade_ - rhs.final_grade_ &gt; <span class="number">1e-6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lhs.grade_e_ != rhs.grade_e_) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.grade_e_ &gt; rhs.grade_e_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lhs.id_&lt;rhs.id_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    cin &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line">    <span class="comment">//学校还可以录取的人数</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">school_quota</span><span class="params">(M)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : school_quota) cin &gt;&gt; i;</span><br><span class="line">    <span class="function">vector&lt;Student&gt; <span class="title">all_student</span><span class="params">(N)</span></span>;</span><br><span class="line">    <span class="comment">//输入学生数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        all_student[i].id_ = i;</span><br><span class="line">        cin &gt;&gt; all_student[i].grade_e_ &gt;&gt; all_student[i].grade_i_;</span><br><span class="line">        all_student[i].school_want_to_go_ = vector&lt;<span class="keyword">int</span>&gt;(K);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;j: all_student[i].school_want_to_go_)&#123;</span><br><span class="line">            cin &gt;&gt; j;</span><br><span class="line">        &#125;</span><br><span class="line">        all_student[i].final_grade_ = (all_student[i].grade_e_ + all_student[i].grade_i_) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="built_in">sort</span>(all_student.<span class="built_in">begin</span>(), all_student.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">int</span> rank_ctr = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; all_student.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) all_student[i].rank_ = ++rank_ctr;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">abs</span>(all_student[i].final_grade_ - all_student[i - <span class="number">1</span>].final_grade_) &lt; <span class="number">1e-6</span></span><br><span class="line">            &amp;&amp; all_student[i].grade_e_ == all_student[i - <span class="number">1</span>].grade_e_) &#123;</span><br><span class="line">            all_student[i].rank_ = rank_ctr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            all_student[i].rank_ = ++rank_ctr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建一个录取序列</span></span><br><span class="line">    vector&lt;vector&lt;Student&gt;&gt; <span class="built_in">luqu</span>(rank_ctr+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : all_student) &#123;</span><br><span class="line">        luqu[i.rank_].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* for (auto i : luqu) &#123;</span></span><br><span class="line"><span class="comment">        for (auto j : i) &#123;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; j.final_grade_ &lt;&lt; &quot; &quot; &lt;&lt; j.id_ &lt;&lt; &quot; &quot;</span></span><br><span class="line"><span class="comment">                &lt;&lt; j.grade_e_ &lt;&lt; &quot; &quot; &lt;&lt; j.grade_i_ &lt;&lt; &quot; &quot; &lt;&lt; j.rank_ &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//创建学校序列进行录取</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">school_set</span>(M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;this_turn : luqu) &#123;</span><br><span class="line">        <span class="comment">//为了处理相同录取的情况，在一轮录取完成之后才把本轮录取人数加到学校已录取人数上面。</span></span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">school_admit_this_turn</span><span class="params">(M,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;this_student : this_turn) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;school_wannnt : this_student.school_want_to_go_) &#123;</span><br><span class="line">                <span class="comment">//当学校没有录满的时候录入</span></span><br><span class="line">                <span class="keyword">if</span> (school_quota[school_wannnt] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    school_admit_this_turn[school_wannnt]++;</span><br><span class="line">                    school_set[school_wannnt].<span class="built_in">push_back</span>(this_student.id_);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这一轮之后，school_quota减去已经录取的人数。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">            school_quota[i] -= school_admit_this_turn[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出前按照序号排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : school_set) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(i.<span class="built_in">begin</span>(), i.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : school_set) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j != <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout &lt;&lt; i[j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1081 Rational Sum</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201081%20Rational%20Sum/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201081%20Rational%20Sum/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1081-Rational-Sum"><a href="#PAT-甲级-1081-Rational-Sum" class="headerlink" title="PAT 甲级 1081 Rational Sum"></a>PAT 甲级 1081 Rational Sum</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &gt; a) <span class="built_in">swap</span>(a, b);</span><br><span class="line">        a %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fraction</span> &#123;</span></span><br><span class="line">    LL up, down;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reduction</span><span class="params">(Fraction&amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 规整符号</span></span><br><span class="line">    <span class="keyword">if</span> (f.down &lt; <span class="number">0</span>) f.up = -f.up, f.down = -f.down;</span><br><span class="line">    <span class="comment">// 0的特判</span></span><br><span class="line">    <span class="keyword">if</span> (f.up == <span class="number">0</span>) f.down = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 化简</span></span><br><span class="line">    LL d = <span class="built_in">gcd</span>(<span class="built_in">abs</span>(f.up), <span class="built_in">abs</span>(f.down));</span><br><span class="line">    f.up /= d;</span><br><span class="line">    f.down /= d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Fraction <span class="title">Add</span><span class="params">(Fraction a, Fraction b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fraction ans;</span><br><span class="line">    ans.up   = a.up * b.down + a.down * b.up;</span><br><span class="line">    ans.down = a.down * b.down;</span><br><span class="line">    <span class="built_in">Reduction</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Fraction <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fraction ans;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld/%lld&quot;</span>, &amp;ans.up, &amp;ans.down);</span><br><span class="line">    <span class="built_in">Reduction</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(Fraction f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Reduction</span>(f);</span><br><span class="line">    <span class="keyword">if</span> (f.down == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, f.up);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">abs</span>(f.up) &gt; <span class="built_in">abs</span>(f.down))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld/%lld&quot;</span>, f.up / f.down, <span class="built_in">abs</span>(f.up) % f.down, f.down);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld/%lld&quot;</span>, f.up, f.down);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    Fraction ans = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    Fraction tmp;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        tmp = <span class="built_in">Read</span>();</span><br><span class="line">        ans = <span class="built_in">Add</span>(ans, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Print</span>(ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1083 List Grades</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201083%20List%20Grades/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201083%20List%20Grades/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1083-List-Grades"><a href="#PAT-甲级-1083-List-Grades" class="headerlink" title="PAT 甲级 1083 List Grades"></a>PAT 甲级 1083 List Grades</h2><p>简单的排序题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name_;</span><br><span class="line">    string id_;</span><br><span class="line">    <span class="keyword">int</span> scores_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Student &amp;lhs, <span class="keyword">const</span> Student &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.scores_ &gt; rhs.scores_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;Student&gt; <span class="title">student_set</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; student_set[i].name_ &gt;&gt; student_set[i].id_ &gt;&gt; student_set[i].scores_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> left_scores, right_scores; cin &gt;&gt; left_scores &gt;&gt; right_scores;</span><br><span class="line">    <span class="built_in">sort</span>(student_set.<span class="built_in">begin</span>(), student_set.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">bool</span> have_printed = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : student_set) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i.scores_ &gt;= left_scores &amp;&amp; i.scores_ &lt;= right_scores) &#123;</span><br><span class="line">            cout &lt;&lt; i.name_ &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.id_ &lt;&lt; endl;</span><br><span class="line">            have_printed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!have_printed) cout &lt;&lt; <span class="string">&quot;NONE&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1088 Rational Arithmetic</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201088%20Rational%20Arithmetic/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201088%20Rational%20Arithmetic/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1088-Rational-Arithmetic"><a href="#PAT-甲级-1088-Rational-Arithmetic" class="headerlink" title="PAT 甲级 1088 Rational Arithmetic"></a>PAT 甲级 1088 Rational Arithmetic</h2><p>大家注意一下Inf不要写成INF不然就会像个憨批一样扒数据扒半个小时。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fraction</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> up, down;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &gt; a) <span class="built_in">swap</span>(a, b);</span><br><span class="line">        a %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Fraction <span class="title">Reduction</span><span class="params">(Fraction f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 分母为0的情况没有处理，调用时注意</span></span><br><span class="line">    <span class="comment">// 规整符号</span></span><br><span class="line">    <span class="keyword">if</span> (f.down &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        f.up   = -f.up;</span><br><span class="line">        f.down = -f.down;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 分子为0</span></span><br><span class="line">    <span class="keyword">if</span> (f.up == <span class="number">0</span>)</span><br><span class="line">        f.down = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="built_in">gcd</span>(<span class="built_in">abs</span>(f.up), <span class="built_in">abs</span>(f.down));</span><br><span class="line">        f.up /= d;</span><br><span class="line">        f.down /= d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Fraction <span class="title">Add</span><span class="params">(Fraction a, Fraction b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fraction ans;</span><br><span class="line">    ans.down = a.down * b.down;</span><br><span class="line">    ans.up   = a.up * b.down + a.down * b.up;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reduction</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Fraction <span class="title">Minu</span><span class="params">(Fraction a, Fraction b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fraction ans;</span><br><span class="line">    ans.down = a.down * b.down;</span><br><span class="line">    ans.up   = a.up * b.down - a.down * b.up;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reduction</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Fraction <span class="title">Multi</span><span class="params">(Fraction a, Fraction b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fraction ans;</span><br><span class="line">    ans.down = a.down * b.down;</span><br><span class="line">    ans.up   = a.up * b.up;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reduction</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Fraction <span class="title">Divide</span><span class="params">(Fraction a, Fraction b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fraction ans;</span><br><span class="line">    ans.down = a.down * b.up;</span><br><span class="line">    ans.up   = a.up * b.down;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reduction</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(Fraction f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f = <span class="built_in">Reduction</span>(f);</span><br><span class="line">    <span class="keyword">if</span> (f.up &lt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">    <span class="comment">// 整数</span></span><br><span class="line">    <span class="keyword">if</span> (f.down == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, f.up);</span><br><span class="line">    <span class="comment">// 假分数</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">abs</span>(f.up) &gt; <span class="built_in">abs</span>(f.down))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld/%lld&quot;</span>, f.up / f.down, <span class="built_in">abs</span>(f.up) % f.down, f.down);</span><br><span class="line">    <span class="comment">// 真分数</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld/%lld&quot;</span>, f.up, f.down);</span><br><span class="line">    <span class="keyword">if</span> (f.up &lt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fraction a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld/%lld %lld/%lld&quot;</span>, &amp;a.up, &amp;a.down, &amp;b.up, &amp;b.down);</span><br><span class="line">    <span class="comment">// 加</span></span><br><span class="line">    <span class="built_in">Print</span>(a);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; + &quot;</span>;</span><br><span class="line">    <span class="built_in">Print</span>(b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; = &quot;</span>;</span><br><span class="line">    <span class="built_in">Print</span>(<span class="built_in">Add</span>(a, b));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 减</span></span><br><span class="line">    <span class="built_in">Print</span>(a);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; - &quot;</span>;</span><br><span class="line">    <span class="built_in">Print</span>(b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; = &quot;</span>;</span><br><span class="line">    <span class="built_in">Print</span>(<span class="built_in">Minu</span>(a, b));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 乘</span></span><br><span class="line">    <span class="built_in">Print</span>(a);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; * &quot;</span>;</span><br><span class="line">    <span class="built_in">Print</span>(b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; = &quot;</span>;</span><br><span class="line">    <span class="built_in">Print</span>(<span class="built_in">Multi</span>(a, b));</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 除</span></span><br><span class="line">    <span class="built_in">Print</span>(a);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; / &quot;</span>;</span><br><span class="line">    <span class="built_in">Print</span>(b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; = &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (b.up != <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">Print</span>(<span class="built_in">Divide</span>(a, b));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Inf&quot;</span>);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1082 Read Number in Chinese</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201082%20Read%20Number%20in%20Chinese/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201082%20Read%20Number%20in%20Chinese/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1082-Read-Number-in-Chinese"><a href="#PAT-甲级-1082-Read-Number-in-Chinese" class="headerlink" title="PAT 甲级 1082 Read Number in Chinese"></a>PAT 甲级 1082 Read Number in Chinese</h2><p>脑瘫写法，虽然能AC但是代码太丑了，明天补上参考答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string num_in_chinese[<span class="number">10</span>] = &#123;</span><br><span class="line">    <span class="string">&quot;ling&quot;</span>,<span class="string">&quot;yi&quot;</span>,<span class="string">&quot;er&quot;</span>,<span class="string">&quot;san&quot;</span>,<span class="string">&quot;si&quot;</span>,<span class="string">&quot;wu&quot;</span>,<span class="string">&quot;liu&quot;</span>,<span class="string">&quot;qi&quot;</span>,<span class="string">&quot;ba&quot;</span>,<span class="string">&quot;jiu&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">string weishu_in_chinese[<span class="number">9</span>] = &#123;</span><br><span class="line">    <span class="string">&quot;&quot;</span>,<span class="string">&quot;Shi&quot;</span>,<span class="string">&quot;Bai&quot;</span>,<span class="string">&quot;Qian&quot;</span>,<span class="string">&quot;Wan&quot;</span>,<span class="string">&quot;Shi&quot;</span>,<span class="string">&quot;Bai&quot;</span>,<span class="string">&quot;Qian&quot;</span>,<span class="string">&quot;Yi&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> num; cin &gt;&gt; num;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;Fu &quot;</span>;</span><br><span class="line">    string num_str = <span class="built_in">to_string</span>(<span class="built_in">abs</span>(num));</span><br><span class="line">    <span class="comment">//倒序储存</span></span><br><span class="line">    <span class="built_in">reverse</span>(num_str.<span class="built_in">begin</span>(), num_str.<span class="built_in">end</span>());</span><br><span class="line">    vector&lt;string&gt; ans;</span><br><span class="line">    <span class="comment">//先存起来，再按规律修改</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_str.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) ans.<span class="built_in">push_back</span>(num_in_chinese[num_str[i] - <span class="string">&#x27;0&#x27;</span>]);</span><br><span class="line">        <span class="keyword">else</span> ans.<span class="built_in">push_back</span>(num_in_chinese[num_str[i] - <span class="string">&#x27;0&#x27;</span>] + <span class="string">&quot; &quot;</span> + weishu_in_chinese[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; ans[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; ans[<span class="number">0</span>] == <span class="string">&quot;ling&quot;</span>) ans[<span class="number">0</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (ans.<span class="built_in">size</span>() &gt;= <span class="number">2</span> &amp;&amp; ans[<span class="number">1</span>] == <span class="string">&quot;ling Shi&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[<span class="number">0</span>] == <span class="string">&quot;&quot;</span>) ans[<span class="number">1</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> ans[<span class="number">1</span>] = <span class="string">&quot;ling&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans.<span class="built_in">size</span>() &gt;= <span class="number">3</span> &amp;&amp; ans[<span class="number">2</span>] == <span class="string">&quot;ling Bai&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[<span class="number">1</span>] == <span class="string">&quot;&quot;</span> || ans[<span class="number">1</span>] == <span class="string">&quot;ling&quot;</span>) ans[<span class="number">2</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> ans[<span class="number">2</span>] = <span class="string">&quot;ling&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans.<span class="built_in">size</span>() &gt;= <span class="number">4</span> &amp;&amp; ans[<span class="number">3</span>] == <span class="string">&quot;ling Qian&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[<span class="number">2</span>] == <span class="string">&quot;&quot;</span> || ans[<span class="number">2</span>] == <span class="string">&quot;ling&quot;</span>) ans[<span class="number">3</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> ans[<span class="number">3</span>] = <span class="string">&quot;ling&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans.<span class="built_in">size</span>() &gt;= <span class="number">5</span> &amp;&amp; ans[<span class="number">4</span>] == <span class="string">&quot;ling Wan&quot;</span>) &#123;</span><br><span class="line">        ans[<span class="number">4</span>] = <span class="string">&quot;Wan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans.<span class="built_in">size</span>() &gt;= <span class="number">6</span> &amp;&amp; ans[<span class="number">5</span>] == <span class="string">&quot;ling Shi&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[<span class="number">4</span>] == <span class="string">&quot;Wan&quot;</span>) ans[<span class="number">5</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> ans[<span class="number">5</span>] = <span class="string">&quot;ling&quot;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans.<span class="built_in">size</span>() &gt;= <span class="number">7</span> &amp;&amp; ans[<span class="number">6</span>] == <span class="string">&quot;ling Bai&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[<span class="number">5</span>] == <span class="string">&quot;&quot;</span> || ans[<span class="number">5</span>] == <span class="string">&quot;ling&quot;</span>) ans[<span class="number">6</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> ans[<span class="number">6</span>] = <span class="string">&quot;ling&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans.<span class="built_in">size</span>() &gt;= <span class="number">8</span> &amp;&amp; ans[<span class="number">7</span>] == <span class="string">&quot;ling Qian&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[<span class="number">6</span>] == <span class="string">&quot;&quot;</span> || ans[<span class="number">6</span>] == <span class="string">&quot;ling&quot;</span>) ans[<span class="number">7</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> ans[<span class="number">7</span>] = <span class="string">&quot;ling&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (ans[<span class="number">7</span>] == <span class="string">&quot;&quot;</span>&amp;&amp;ans[<span class="number">6</span>] == <span class="string">&quot;&quot;</span>&amp;&amp;ans[<span class="number">5</span>] == <span class="string">&quot;&quot;</span>&amp;&amp;ans[<span class="number">4</span>] == <span class="string">&quot;Wan&quot;</span>) ans[<span class="number">4</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; ans[i] != <span class="string">&quot;&quot;</span>)cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考答案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> num[<span class="number">10</span>][<span class="number">5</span>] = &#123;</span><br><span class="line">    <span class="string">&quot;ling&quot;</span>,<span class="string">&quot;yi&quot;</span>,<span class="string">&quot;er&quot;</span>,<span class="string">&quot;san&quot;</span>,<span class="string">&quot;si&quot;</span>,<span class="string">&quot;wu&quot;</span>,<span class="string">&quot;liu&quot;</span>,<span class="string">&quot;qi&quot;</span>,<span class="string">&quot;ba&quot;</span>,<span class="string">&quot;jiu&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> wei[<span class="number">5</span>][<span class="number">5</span>] = &#123;</span><br><span class="line">    <span class="string">&quot;Shi&quot;</span>,<span class="string">&quot;Bai&quot;</span>,<span class="string">&quot;Qian&quot;</span>,<span class="string">&quot;Wan&quot;</span>,<span class="string">&quot;Yi&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">15</span>];</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    <span class="comment">//left_ptr和right_ptr分别指向字符串首尾元素.</span></span><br><span class="line">    <span class="keyword">int</span> str_len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">int</span> left_ptr = <span class="number">0</span>, right_ptr = str_len<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Fu&quot;</span>);</span><br><span class="line">        ++left_ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//left_ptr和right_ptr指向同一节.</span></span><br><span class="line">    <span class="keyword">while</span> (left_ptr + <span class="number">4</span> &lt;= right_ptr) &#123;</span><br><span class="line">        right_ptr -= <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (left_ptr &lt; str_len) &#123;</span><br><span class="line">        <span class="comment">//haves_pre_zero节中有前置零，have_printed节中已经输出过了.</span></span><br><span class="line">        <span class="comment">//前者用来控制只有一个零，后者用来控制输出“万”和“亿”.</span></span><br><span class="line">        <span class="keyword">bool</span> haves_pre_zero = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">bool</span> have_printed = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//一节一节处理.</span></span><br><span class="line">        <span class="keyword">while</span> (left_ptr &lt;= right_ptr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (left_ptr &gt; <span class="number">0</span> &amp;&amp; str[left_ptr] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                haves_pre_zero = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (haves_pre_zero == <span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; ling&quot;</span>);</span><br><span class="line">                    haves_pre_zero = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (left_ptr != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, num[str[left_ptr] - <span class="string">&#x27;0&#x27;</span>]);</span><br><span class="line">                have_printed = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">//某节中除了最后一位，都要输出千百十.</span></span><br><span class="line">                <span class="keyword">if</span> (left_ptr != right_ptr) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; %s&quot;</span>, wei[right_ptr - left_ptr - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ++left_ptr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (have_printed&amp;&amp;right_ptr != str_len - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %s&quot;</span>, wei[(str_len - <span class="number">1</span> - right_ptr) / <span class="number">4</span> + <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//继续处理下一节.</span></span><br><span class="line">        right_ptr += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1084 Broken Keyboard</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201084%20Broken%20Keyboard/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201084%20Broken%20Keyboard/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1084-Broken-Keyboard"><a href="#PAT-甲级-1084-Broken-Keyboard" class="headerlink" title="PAT 甲级 1084 Broken Keyboard"></a>PAT 甲级 1084 Broken Keyboard</h2><p>简单哈希</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    string s1, s2;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">is_break_key</span><span class="params">(<span class="number">512</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : s1) &#123;</span><br><span class="line">        is_break_key[<span class="built_in">toupper</span>(i)] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : s2) &#123;</span><br><span class="line">        is_break_key[<span class="built_in">toupper</span>(i)] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : s1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_break_key[<span class="built_in">toupper</span>(i)]) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in"><span class="keyword">char</span></span>(<span class="built_in">toupper</span>(i));</span><br><span class="line">            is_break_key[<span class="built_in">toupper</span>(i)] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简洁但复杂度高的暴力</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    string s1, s2;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    string ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : s1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s2.<span class="built_in">find</span>(i) == string::npos &amp;&amp; ans.<span class="built_in">find</span>(<span class="built_in">toupper</span>(i)) == string::npos) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="built_in">toupper</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1089 Insert or Merge</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201089%20Insert%20or%20Merge/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201089%20Insert%20or%20Merge/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1089-Insert-or-Merge"><a href="#PAT-甲级-1089-Insert-or-Merge" class="headerlink" title="PAT 甲级 1089 Insert or Merge"></a>PAT 甲级 1089 Insert or Merge</h2><p>既然归并排序是O(nlongn)，数据规模也不是很大，那把归并中的所有步骤记录下来对比就行了。如果还要求空间复杂度不高的话单步归并之后马上对比，如果一样就break咯。需要注意的是，题目中的归并排序是非递归的二路归并排序，需要用非递归的实现来写。规模比较小所以中间可以用sort，不用自己写Merge例程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; merge_sort_steps[MAXN];</span><br><span class="line"><span class="comment">// 把每一步排序都放到merge_sort_steps里并返回排序完成需要的步数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; tmp = merge_sort_steps[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ctr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> step = <span class="number">2</span>; step / <span class="number">2</span> &lt;= n; step *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt; n; i += step) &#123;</span><br><span class="line">            <span class="built_in">sort</span>(&amp;tmp[i], &amp;tmp[<span class="built_in">min</span>(i + step, n)]);</span><br><span class="line">        &#125;</span><br><span class="line">        merge_sort_steps[++ctr] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ctr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">// 初始排序写入merge_sort_steps[0]，目标过程写入这个数组的最后一个位置</span></span><br><span class="line">    merge_sort_steps[<span class="number">0</span>]   = vector&lt;<span class="keyword">int</span>&gt;(n);</span><br><span class="line">    merge_sort_steps[<span class="number">999</span>] = vector&lt;<span class="keyword">int</span>&gt;(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cin &gt;&gt; merge_sort_steps[<span class="number">0</span>][i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cin &gt;&gt; merge_sort_steps[<span class="number">999</span>][i];</span><br><span class="line">    <span class="comment">// 得到归并排序的结果，判断是否是归并排序</span></span><br><span class="line">    <span class="keyword">int</span> ctr = <span class="built_in">MergeSort</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ctr; ++i) &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (merge_sort_steps[i][j] != merge_sort_steps[<span class="number">999</span>][j])</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是归并排序</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Merge Sort&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j != <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                cout &lt;&lt; merge_sort_steps[i + <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果不是归并排序，就是插入排序，再进行一步插入操作。</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Insertion Sort&quot;</span> &lt;&lt; endl;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; tmp = merge_sort_steps[<span class="number">999</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp[i] &lt; tmp[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">while</span> (tmp[i] &lt; tmp[i - <span class="number">1</span>] &amp;&amp; i &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                std::<span class="built_in">swap</span>(tmp[i], tmp[i - <span class="number">1</span>]);</span><br><span class="line">                --i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j != <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; tmp[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>《算法笔记》上的参考答案（修改了一些IO的语句）其实应该先判断归并的，因为归并复杂度更低。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">int</span> origin[N], tmpOri[N], changed[N];  <span class="comment">// 原始数组，原始数组备份和目标数组</span></span><br><span class="line"><span class="keyword">int</span> n;                                 <span class="comment">//元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsSame</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> B[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] != B[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowArray</span><span class="params">(<span class="keyword">int</span> A[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, A[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;  <span class="comment">// 是否中间步骤中的数组与changed数组相同</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">1</span> &amp;&amp; <span class="built_in">IsSame</span>(tmpOri, changed)) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入排序部分</span></span><br><span class="line">        <span class="keyword">int</span> tmp = tmpOri[i], j = i;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; tmpOri[j - <span class="number">1</span>] &gt; tmp) &#123;</span><br><span class="line">            tmpOri[j] = tmpOri[j - <span class="number">1</span>];</span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">        tmpOri[j] = tmp;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 是插入排序并且tmpOri就是要输出的数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;  <span class="comment">// 是否为归并排序</span></span><br><span class="line">    <span class="comment">// 归并排序部分</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> step = <span class="number">2</span>; step / <span class="number">2</span> &lt;= n; step *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (step != <span class="number">2</span> &amp;&amp; <span class="built_in">IsSame</span>(tmpOri, changed)) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += step) &#123;</span><br><span class="line">            <span class="built_in">sort</span>(tmpOri + i, tmpOri + <span class="built_in">min</span>(i + step, n));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="built_in">ShowArray</span>(tmpOri);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; origin[i];</span><br><span class="line">        tmpOri[i] = origin[i];  <span class="comment">// 排序在tmpOri上进行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; changed[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">InsertSort</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Insertion Sort&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">ShowArray</span>(tmpOri);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Merge Sort&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            tmpOri[i] = origin[i];  <span class="comment">//还原tmpOri数组</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">MergeSort</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1092 To Buy or Not to Buy</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201092%20To%20Buy%20or%20Not%20to%20Buy/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201092%20To%20Buy%20or%20Not%20to%20Buy/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1092-To-Buy-or-Not-to-Buy"><a href="#PAT-甲级-1092-To-Buy-or-Not-to-Buy" class="headerlink" title="PAT 甲级 1092 To Buy or Not to Buy"></a>PAT 甲级 1092 To Buy or Not to Buy</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    string s1, s2;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">have</span><span class="params">(<span class="number">268</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">need</span><span class="params">(<span class="number">268</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : s1)</span><br><span class="line">        have[i]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : s2)</span><br><span class="line">        need[i]++;</span><br><span class="line">    <span class="keyword">int</span> still_need = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">268</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (need[i] != <span class="number">0</span> &amp;&amp; have[i] &lt; need[i]) &#123;</span><br><span class="line">            still_need += need[i] - have[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (still_need == <span class="number">0</span>) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Yes %d&quot;</span>, s1.<span class="built_in">size</span>() - s2.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No %d&quot;</span>, still_need);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1095 Cars on Campus</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201095%20Cars%20on%20Campus/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201095%20Cars%20on%20Campus/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1095-Cars-on-Campus"><a href="#PAT-甲级-1095-Cars-on-Campus" class="headerlink" title="PAT 甲级 1095 Cars on Campus"></a>PAT 甲级 1095 Cars on Campus</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kMAXN = <span class="number">10010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">int</span> time;</span><br><span class="line">    <span class="keyword">char</span> status[<span class="number">4</span>];</span><br><span class="line">&#125; all[kMAXN], valid[kMAXN];</span><br><span class="line"><span class="keyword">int</span> valid_num = <span class="number">0</span>;</span><br><span class="line">map&lt;string, <span class="keyword">int</span>&gt; parkTime;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TimeToInt</span><span class="params">(<span class="keyword">int</span> hh, <span class="keyword">int</span> mm, <span class="keyword">int</span> ss)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hh * <span class="number">3600</span> + mm * <span class="number">60</span> + ss;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CmpIdAndTime</span><span class="params">(<span class="keyword">const</span> Car&amp; a, <span class="keyword">const</span> Car&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(a.id, b.id))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strcmp</span>(a.id, b.id) &lt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> a.time &lt; b.time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CmpTime</span><span class="params">(<span class="keyword">const</span> Car&amp; a, <span class="keyword">const</span> Car&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.time &lt; b.time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n, k, hh, mm, ss;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d:%d:%d %s&quot;</span>, all[i].id, &amp;hh, &amp;mm, &amp;ss, all[i].status);</span><br><span class="line">        all[i].time = <span class="built_in">TimeToInt</span>(hh, mm, ss);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(all, all + n, CmpIdAndTime);</span><br><span class="line">    <span class="keyword">int</span> max_time = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(all[i].id, all[i + <span class="number">1</span>].id) &amp;&amp; !<span class="built_in">strcmp</span>(all[i].status, <span class="string">&quot;in&quot;</span>) &amp;&amp;</span><br><span class="line">            !<span class="built_in">strcmp</span>(all[i + <span class="number">1</span>].status, <span class="string">&quot;out&quot;</span>)) &#123;</span><br><span class="line">            valid[valid_num++] = all[i];</span><br><span class="line">            valid[valid_num++] = all[i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> this_in_time   = all[i + <span class="number">1</span>].time - all[i].time;</span><br><span class="line">            parkTime[all[i].id] += this_in_time;</span><br><span class="line">            max_time = <span class="built_in">max</span>(max_time, parkTime[all[i].id]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(valid, valid + valid_num, CmpTime);</span><br><span class="line">    <span class="keyword">int</span> now     = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num_car = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d:%d:%d&quot;</span>, &amp;hh, &amp;mm, &amp;ss);</span><br><span class="line">        <span class="keyword">int</span> time = <span class="built_in">TimeToInt</span>(hh, mm, ss);</span><br><span class="line">        <span class="keyword">while</span> (now &lt; valid_num &amp;&amp; valid[now].time &lt;= time) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(valid[now].status, <span class="string">&quot;in&quot;</span>))</span><br><span class="line">                num_car++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                num_car--;</span><br><span class="line">            now++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num_car);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> itr = parkTime.<span class="built_in">begin</span>(); itr != parkTime.<span class="built_in">end</span>(); ++itr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (itr-&gt;second == max_time) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, itr-&gt;first.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d&quot;</span>, max_time / <span class="number">3600</span>, max_time % <span class="number">3600</span> / <span class="number">60</span>,</span><br><span class="line">           max_time % <span class="number">60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1096 Consecutive Factors</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201096%20Consecutive%20Factors/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201096%20Consecutive%20Factors/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1096-Consecutive-Factors"><a href="#PAT-甲级-1096-Consecutive-Factors" class="headerlink" title="PAT 甲级 1096 Consecutive Factors"></a>PAT 甲级 1096 Consecutive Factors</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> num, max_len = <span class="number">-1</span>, now_len = <span class="number">0</span>, beg = <span class="number">0</span>, now_beg;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(num)); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> j   = i;</span><br><span class="line">            now_len = <span class="number">0</span>, now_beg = j;</span><br><span class="line">            <span class="comment">// 防止溢出</span></span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> tmp = j;</span><br><span class="line">            <span class="keyword">while</span> (num % tmp == <span class="number">0</span>) &#123;</span><br><span class="line">                ++j, tmp *= j;</span><br><span class="line">            &#125;</span><br><span class="line">            now_len = j - now_beg;</span><br><span class="line">            <span class="keyword">if</span> (now_len &gt; max_len) &#123;</span><br><span class="line">                max_len = now_len, beg = now_beg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (max_len == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">// 小于等于ceil(sqrt(num))的没有num的因子，说明num是素数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1\n%d&quot;</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; max_len &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max_len; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;*&quot;</span>;</span><br><span class="line">            cout &lt;&lt; i + beg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1093 Count PAT‘s</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201093%20Count%20PAT%E2%80%98s/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201093%20Count%20PAT%E2%80%98s/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kMOD 1000000007</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="comment">// 在位置i之前(包括位置i)有多少个P，位置i之后(包括位置i)有多少个T</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">pre_P</span><span class="params">(s.size())</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">post_T</span><span class="params">(s.size())</span></span>;</span><br><span class="line">    <span class="keyword">int</span> ctr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">            pre_P[i] = ++ctr;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pre_P[i] = ctr;</span><br><span class="line">    &#125;</span><br><span class="line">    ctr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;T&#x27;</span>)</span><br><span class="line">            post_T[i] = ++ctr;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            post_T[i] = ctr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计数</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">            ans = (ans + pre_P[i] * post_T[i] % kMOD) % kMOD;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1100 Mars Numbers</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201100%20Mars%20Numbers/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201100%20Mars%20Numbers/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1100-Mars-Numbers"><a href="#PAT-甲级-1100-Mars-Numbers" class="headerlink" title="PAT 甲级 1100 Mars Numbers"></a>PAT 甲级 1100 Mars Numbers</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;string&gt; mars_low = &#123; <span class="string">&quot;tret&quot;</span>, <span class="string">&quot;jan&quot;</span>, <span class="string">&quot;feb&quot;</span>, <span class="string">&quot;mar&quot;</span>, <span class="string">&quot;apr&quot;</span>, <span class="string">&quot;may&quot;</span>, <span class="string">&quot;jun&quot;</span>, <span class="string">&quot;jly&quot;</span>,</span><br><span class="line">                           <span class="string">&quot;aug&quot;</span>, <span class="string">&quot;sep&quot;</span>, <span class="string">&quot;oct&quot;</span>, <span class="string">&quot;nov&quot;</span>, <span class="string">&quot;dec&quot;</span> &#125;;</span><br><span class="line">vector&lt;string&gt; mars_high = &#123; <span class="string">&quot;tret&quot;</span>, <span class="string">&quot;tam&quot;</span>, <span class="string">&quot;hel&quot;</span>, <span class="string">&quot;maa&quot;</span>, <span class="string">&quot;huh&quot;</span>, <span class="string">&quot;tou&quot;</span>, <span class="string">&quot;kes&quot;</span>, <span class="string">&quot;hei&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;elo&quot;</span>, <span class="string">&quot;syy&quot;</span>, <span class="string">&quot;lok&quot;</span>, <span class="string">&quot;mer&quot;</span>, <span class="string">&quot;jou&quot;</span> &#125;;</span><br><span class="line">map&lt;string, string&gt; to_mars;</span><br><span class="line">map&lt;string, string&gt; to_earth;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">169</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> high = i / <span class="number">13</span>;</span><br><span class="line">        <span class="keyword">int</span> low = i % <span class="number">13</span>;</span><br><span class="line">        <span class="keyword">if</span> (high == <span class="number">0</span>)</span><br><span class="line">            to_mars[<span class="built_in">to_string</span>(i)] = mars_low[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (low == <span class="number">0</span>)</span><br><span class="line">            to_mars[<span class="built_in">to_string</span>(i)] = mars_high[high];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            to_mars[<span class="built_in">to_string</span>(i)] = mars_high[high] + <span class="string">&quot; &quot;</span> + mars_low[low];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> item : to_mars) &#123;</span><br><span class="line">        to_earth[item.second] = item.first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">Init</span>();</span><br><span class="line">    <span class="keyword">int</span> N; cin &gt;&gt; N; string s; cin.<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span> (N--) &#123;</span><br><span class="line">        <span class="built_in">getline</span>(cin, s);</span><br><span class="line">        <span class="built_in">isdigit</span>(s[<span class="number">0</span>]) ? (cout &lt;&lt; to_mars[s] &lt;&lt; endl) : (cout &lt;&lt; to_earth[s] &lt;&lt; endl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1097 Deduplication on a Linked List</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201097%20Deduplication%20on%20a%20Linked%20List/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201097%20Deduplication%20on%20a%20Linked%20List/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1097-Deduplication-on-a-Linked-List"><a href="#PAT-甲级-1097-Deduplication-on-a-Linked-List" class="headerlink" title="PAT 甲级 1097 Deduplication on a Linked List"></a>PAT 甲级 1097 Deduplication on a Linked List</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kMAXN=<span class="number">100000</span>;</span><br><span class="line"><span class="comment">// flag 为 -1 是第一次出现，为 1 是非第一次出现 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> address,data,next,flag&#123;<span class="number">1</span>&#125;,order&#123;<span class="number">0x3f3f3f3f</span>&#125;;</span><br><span class="line">&#125;node[kMAXN]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> hashtable[<span class="number">100000</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node&amp; a,<span class="keyword">const</span> Node&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.flag!=b.flag)</span><br><span class="line">        <span class="keyword">return</span> a.flag&lt;b.flag;</span><br><span class="line">    <span class="keyword">return</span> a.order&lt;b.order;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> head,N;</span><br><span class="line">    cin&gt;&gt;head&gt;&gt;N;</span><br><span class="line">    </span><br><span class="line">    Node tmp;</span><br><span class="line">    <span class="keyword">while</span>(N--)&#123;</span><br><span class="line">        cin&gt;&gt;tmp.address&gt;&gt;tmp.data&gt;&gt;tmp.next;</span><br><span class="line">        node[tmp.address]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ctr=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(head!=<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> data_abs=<span class="built_in">abs</span>(node[head].data);</span><br><span class="line">        <span class="keyword">if</span>(!hashtable[data_abs])&#123;</span><br><span class="line">            hashtable[data_abs]=<span class="literal">true</span>;</span><br><span class="line">            node[head].flag=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node[head].order=(ctr++);</span><br><span class="line">        head=node[head].next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(node,node+kMAXN,cmp);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ctr<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        Node &amp;now=node[i];Node &amp;next=node[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(now.flag!=next.flag)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1\n&quot;</span>,now.address,now.data);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>,now.address,now.data,next.address);</span><br><span class="line">    &#125;</span><br><span class="line">    Node &amp;now=node[ctr<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1\n&quot;</span>,now.address,now.data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1103 Integer Factorization</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201103%20Integer%20Factorization/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201103%20Integer%20Factorization/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1103-Integer-Factorization"><a href="#PAT-甲级-1103-Integer-Factorization" class="headerlink" title="PAT 甲级 1103 Integer Factorization"></a>PAT 甲级 1103 Integer Factorization</h2><p>DFS的题，自己居然一步一步写出来了，还AC了，好高兴。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> N,K,P; </span><br><span class="line"><span class="keyword">int</span> tmp[<span class="number">30</span>],ans[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> max_fac_sum=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;P;++i) ans*=x;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> fac_sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// k 当前子问题还可以选取因子个数</span></span><br><span class="line">    <span class="comment">// n 当前子问题需要求和的目标</span></span><br><span class="line">    <span class="comment">// m 当前子问题选取的因子最大取值</span></span><br><span class="line">    <span class="comment">// fac_sum 当前累计选取的因子的和，用于结束递归时判断是否是题目要求的更优解</span></span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>||k==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>&amp;&amp;fac_sum&gt;max_fac_sum&amp;&amp;n==<span class="number">0</span>)&#123;</span><br><span class="line">            max_fac_sum=fac_sum;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;++i)</span><br><span class="line">                ans[i]=tmp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(n&gt;=<span class="built_in">power</span>(m))&#123;</span><br><span class="line">        tmp[m]++;</span><br><span class="line">        <span class="built_in">DFS</span>(k<span class="number">-1</span>,n-<span class="built_in">power</span>(m),m,fac_sum+m);</span><br><span class="line">        tmp[m]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">DFS</span>(k,n,m<span class="number">-1</span>,fac_sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    cin&gt;&gt;N&gt;&gt;K&gt;&gt;P;</span><br><span class="line">    <span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(tmp));</span><br><span class="line">    <span class="built_in">DFS</span>(K,N,<span class="built_in">ceil</span>(<span class="built_in">pow</span>(N,<span class="number">1.0</span>/P)),<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ctr=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;++i)&#123;</span><br><span class="line">        ctr+=ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ctr!=K)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Impossible&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ctr=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d = &quot;</span>,N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span><span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(ans[i]--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ctr!=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot; + &quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d^%d&quot;</span>,i,P);</span><br><span class="line">                ++ctr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1104 Sum of Number Segments</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201104%20Sum%20of%20Number%20Segments/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201104%20Sum%20of%20Number%20Segments/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1104-Sum-of-Number-Segments"><a href="#PAT-甲级-1104-Sum-of-Number-Segments" class="headerlink" title="PAT 甲级 1104 Sum of Number Segments"></a>PAT 甲级 1104 Sum of Number Segments</h2><p>这道题是目前见过唯一一道需要用long double类型的题（否则测试点三会过不了）。注意long double类型的输出是%Lf。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> sum = <span class="number">0</span>, tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cin &gt;&gt; tmp, sum += tmp * (n - i) * (i + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2Lf&quot;</span>, sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT 甲级 1101 Quick Sort</title>
      <link href="/20210620/PAT%20%E7%94%B2%E7%BA%A7%201101%20Quick%20Sort/"/>
      <url>/20210620/PAT%20%E7%94%B2%E7%BA%A7%201101%20Quick%20Sort/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT-甲级-1101-Quick-Sort"><a href="#PAT-甲级-1101-Quick-Sort" class="headerlink" title="PAT 甲级 1101 Quick Sort"></a>PAT 甲级 1101 Quick Sort</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// 左右扫两遍，第一遍记录最大的数字，如果i位置的数字小于max，i位置设为false</span></span><br><span class="line">    <span class="comment">// 第二遍从右往左，记录最小数字，如果i位置数字大于min，i位置设为false</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">nums</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>&amp; i : nums) cin &gt;&gt; i;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">is_pivot</span><span class="params">(nums.size(), <span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">0x3f3f3f3f</span>, max = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt; max)</span><br><span class="line">            is_pivot[i] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            max = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; min)</span><br><span class="line">            is_pivot[i] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            min = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_pivot[i]) ans.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意输出如果没有主元，输出空行</span></span><br><span class="line">    <span class="keyword">if</span> (ans.<span class="built_in">empty</span>()) cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1051 Pop Sequence</title>
      <link href="/20210620/PAT%E7%94%B2%E7%BA%A7%201051%20Pop%20Sequence/"/>
      <url>/20210620/PAT%E7%94%B2%E7%BA%A7%201051%20Pop%20Sequence/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT甲级-1051-Pop-Sequence"><a href="#PAT甲级-1051-Pop-Sequence" class="headerlink" title="PAT甲级 1051 Pop Sequence"></a>PAT甲级 1051 Pop Sequence</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> M,N,K;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsPopSequence</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s;<span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=v.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        s.<span class="built_in">push</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()&gt;M) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(!s.<span class="built_in">empty</span>()&amp;&amp;v[pos]==s.<span class="built_in">top</span>())&#123;</span><br><span class="line">            s.<span class="built_in">pop</span>();++pos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pos==v.<span class="built_in">size</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    cin&gt;&gt;M&gt;&gt;N&gt;&gt;K;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(N,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(K--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:v) cin&gt;&gt;i;</span><br><span class="line">        <span class="built_in">IsPopSequence</span>(v)?<span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>):<span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1023 Have Fun with Numbers</title>
      <link href="/20210620/PAT%E7%94%B2%E7%BA%A7%201023%20Have%20Fun%20with%20Numbers/"/>
      <url>/20210620/PAT%E7%94%B2%E7%BA%A7%201023%20Have%20Fun%20with%20Numbers/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT甲级-1023-Have-Fun-with-Numbers"><a href="#PAT甲级-1023-Have-Fun-with-Numbers" class="headerlink" title="PAT甲级 1023 Have Fun with Numbers"></a>PAT甲级 1023 Have Fun with Numbers</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BigN</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; d&#123;vector&lt;<span class="keyword">int</span>&gt;(<span class="number">1000</span>, <span class="number">0</span>)&#125;;</span><br><span class="line">    <span class="keyword">int</span> len&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; analysis&#123;vector&lt;<span class="keyword">int</span>&gt;(<span class="number">10</span>, <span class="number">0</span>)&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">BigN <span class="title">Change</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BigN ans;</span><br><span class="line">    ans.len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.len; ++i) &#123;</span><br><span class="line">        ans.d[i] = str[ans.len - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BigN <span class="title">Multi</span><span class="params">(<span class="keyword">const</span> BigN&amp; a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BigN ans;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp          = a.d[i] * b + carry;</span><br><span class="line">        ans.d[ans.len++] = tmp % <span class="number">10</span>;</span><br><span class="line">        carry            = tmp / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (carry != <span class="number">0</span>) &#123;</span><br><span class="line">        ans.d[ans.len++] = carry % <span class="number">10</span>;</span><br><span class="line">        carry /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsPermutation</span><span class="params">(<span class="keyword">const</span> BigN&amp; a, <span class="keyword">const</span> BigN&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.analysis[i] != b.analysis[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Analysis</span><span class="params">(BigN&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; ++i) &#123;</span><br><span class="line">        a.analysis[a.d[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">const</span> BigN&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        cout &lt;&lt; a.d[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    BigN num   = <span class="built_in">Change</span>(s.<span class="built_in">c_str</span>());</span><br><span class="line">    BigN num_2 = <span class="built_in">Multi</span>(num, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">Analysis</span>(num);</span><br><span class="line">    <span class="built_in">Analysis</span>(num_2);</span><br><span class="line">    cout &lt;&lt; (<span class="built_in">IsPermutation</span>(num, num_2) ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">Print</span>(num_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1058 A+B in Hogwarts</title>
      <link href="/20210620/PAT%E7%94%B2%E7%BA%A7%201058%20A+B%20in%20Hogwarts/"/>
      <url>/20210620/PAT%E7%94%B2%E7%BA%A7%201058%20A+B%20in%20Hogwarts/</url>
      
        <content type="html"><![CDATA[<h2 id="PAT甲级-1058-A-B-in-Hogwarts"><a href="#PAT甲级-1058-A-B-in-Hogwarts" class="headerlink" title="PAT甲级 1058 A+B in Hogwarts"></a>PAT甲级 1058 A+B in Hogwarts</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sickle, galleon, knut;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld.%lld.%lld&quot;</span>, &amp;galleon, &amp;sickle, &amp;knut);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> A = galleon * <span class="number">17</span> * <span class="number">29</span> + sickle * <span class="number">29</span> + knut;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld.%lld.%lld&quot;</span>, &amp;galleon, &amp;sickle, &amp;knut);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> B = galleon * <span class="number">17</span> * <span class="number">29</span> + sickle * <span class="number">29</span> + knut;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> A_add_B = A + B;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld.%lld.%lld&quot;</span>,</span><br><span class="line">        A_add_B / <span class="number">493</span>, A_add_B / <span class="number">29</span> % <span class="number">17</span>, A_add_B % <span class="number">29</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UVA-1225</title>
      <link href="/20210620/UVA-1225/"/>
      <url>/20210620/UVA-1225/</url>
      
        <content type="html"><![CDATA[<h2 id="UVA-1225"><a href="#UVA-1225" class="headerlink" title="UVA-1225"></a>UVA-1225</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#define _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">        <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">while</span> (j!=<span class="number">0</span>) &#123;</span><br><span class="line">                ++ans[j % <span class="number">10</span>];</span><br><span class="line">                j = j / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d %d %d %d %d %d %d\n&quot;</span>,</span><br><span class="line">            ans[<span class="number">0</span>], ans[<span class="number">1</span>], ans[<span class="number">2</span>], ans[<span class="number">3</span>], ans[<span class="number">4</span>],</span><br><span class="line">            ans[<span class="number">5</span>], ans[<span class="number">6</span>], ans[<span class="number">7</span>], ans[<span class="number">8</span>], ans[<span class="number">9</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1085 Perfect Sequence 二分和双指针（Two Pointers）</title>
      <link href="/20210620/PAT%E7%94%B2%E7%BA%A7%201085%20Perfect%20Sequence%20%E4%BA%8C%E5%88%86%E5%92%8C%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%88Two%20Pointers%EF%BC%89/"/>
      <url>/20210620/PAT%E7%94%B2%E7%BA%A7%201085%20Perfect%20Sequence%20%E4%BA%8C%E5%88%86%E5%92%8C%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%88Two%20Pointers%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>二分写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_upper_bound</span><span class="params">(<span class="keyword">const</span> vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&amp; nums, <span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> beg = <span class="number">0</span>, end = nums.<span class="built_in">size</span>(), mid = beg + (end - beg) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (beg &lt; end) &#123;</span><br><span class="line">        mid = beg + (end - beg) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt;= x) &#123;  <span class="comment">// 第一个大于x的数一定在mid后面</span></span><br><span class="line">            beg = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            end = mid;  <span class="comment">// 第一个大于x的数在mid之前（含mid）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> end;  <span class="comment">// 结束时有end=beg</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> p;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; p;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">nums</span><span class="params">(N)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max_contain = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x = nums[i] * p;</span><br><span class="line">        <span class="keyword">int</span> idx     = <span class="built_in">find_upper_bound</span>(nums, x);</span><br><span class="line">        max_contain = std::<span class="built_in">max</span>(max_contain, idx - i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; max_contain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双指针（Two Pointers）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> p;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; p;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">nums</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : nums) cin &gt;&gt; i;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">// i和j起点为0，i指示最小数字，j指示最大数字</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; n) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> tmp = nums[i] * p;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; n &amp;&amp; nums[j] &lt;= tmp) ++j;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, j - i);</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UVA-1585</title>
      <link href="/20210620/UVA-1585/"/>
      <url>/20210620/UVA-1585/</url>
      
        <content type="html"><![CDATA[<h2 id="UVA-1585"><a href="#UVA-1585" class="headerlink" title="UVA-1585"></a>UVA-1585</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#define _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">1010</span>];</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, ctr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;O&#x27;</span>) &#123;</span><br><span class="line">                sum += (++ctr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> ctr = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用一个int ctr表示从上一个X开始到当前0出现了多少次</span></span><br><span class="line"><span class="comment">//用sum表示总分</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UVA-1586</title>
      <link href="/20210620/UVA-1586/"/>
      <url>/20210620/UVA-1586/</url>
      
        <content type="html"><![CDATA[<h2 id="UVA-1586"><a href="#UVA-1586" class="headerlink" title="UVA-1586"></a>UVA-1586</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#define _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">512</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>; <span class="keyword">char</span> elem = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">        <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isalpha</span>(s[i])) &#123;</span><br><span class="line">                elem = s[i];</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">isalpha</span>(s[i + <span class="number">1</span>]) || s[i + <span class="number">1</span>] == <span class="string">&#x27;\0&#x27;</span>)   tmp = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i + <span class="number">1</span>])&amp;&amp; <span class="built_in">isdigit</span>(s[i + <span class="number">2</span>])) &#123;</span><br><span class="line">                    tmp = (s[i + <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (s[i + <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i + <span class="number">1</span>])) &#123;</span><br><span class="line">                    tmp = s[i + <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ans[elem] += tmp; tmp = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> mess = ans[<span class="string">&#x27;C&#x27;</span>] * <span class="number">12.01</span> + ans[<span class="string">&#x27;H&#x27;</span>] * <span class="number">1.008</span> + ans[<span class="string">&#x27;O&#x27;</span>] * <span class="number">16.00</span> + ans[<span class="string">&#x27;N&#x27;</span>] * <span class="number">14.01</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.3f\n&quot;</span>, mess);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//本题描述了字符和数字混合输入的情况</span></span><br><span class="line"><span class="comment">//用cin能够比较好的处理</span></span><br><span class="line"><span class="comment">//如果用scanf的话，可能需要进行一个转化</span></span><br><span class="line"><span class="comment">//用char elem记录在处理的元素，用char s[]表示输入的串；</span></span><br><span class="line"><span class="comment">//如果isalpha</span></span><br><span class="line">    <span class="comment">//如果下一个元素isalpha，那么tmp=1;</span></span><br><span class="line">    <span class="comment">//如果下两个元素isdigit，那么tmp=；</span></span><br><span class="line">    <span class="comment">//如果下一个元素isdigit，那么tmp=；</span></span><br><span class="line">    <span class="comment">//ans[elem]+=tmp;tmp=0;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UVA-455</title>
      <link href="/20210620/UVA-455/"/>
      <url>/20210620/UVA-455/</url>
      
        <content type="html"><![CDATA[<h2 id="UVA-455"><a href="#UVA-455" class="headerlink" title="UVA-455"></a>UVA-455</h2><p>这道题的输出格式要求很特别</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#define _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isperidic</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= p; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> idx = i; tmp = s[idx];</span><br><span class="line">        <span class="keyword">while</span> (idx &lt; <span class="built_in">strlen</span>(s))&#123;</span><br><span class="line">            <span class="keyword">if</span> (s[(idx + p) % <span class="built_in">strlen</span>(s)] != tmp) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            idx += p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T); <span class="keyword">int</span> T0 = T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (T+<span class="number">1</span> != T0) &#123; <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); &#125;</span><br><span class="line">        <span class="built_in">memset</span>(s, <span class="string">&#x27;\0&#x27;</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(s));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;s);</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s); <span class="keyword">int</span> peridic = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n%i != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isperidic</span>(s, i)) &#123;</span><br><span class="line">                peridic = i;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, peridic);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//首先周期数必定是strlen(s)的因数</span></span><br><span class="line"><span class="comment">//strlen(s)&lt;80,所以可以遍历周期数来进行判断；</span></span><br><span class="line"><span class="comment">//用处理循环数组的方法（取余数）来解决越界的问题</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UVA-227</title>
      <link href="/20210620/UVA-227/"/>
      <url>/20210620/UVA-227/</url>
      
        <content type="html"><![CDATA[<h2 id="UVA-227"><a href="#UVA-227" class="headerlink" title="UVA-227"></a>UVA-227</h2><p>这道题写了有一个半小时，里面除了两三分钟写移动的代码，其他全都在处理输入输出格式，简直吐血。自己习惯STL，但是这次训练中刻意没有用string处理square，代码看起来好丑。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#define _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">movesquare</span><span class="params">(<span class="keyword">char</span> s[<span class="number">5</span>][<span class="number">5</span>],string &amp;m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> idx1 = <span class="number">0</span>, idx2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">&#x27; &#x27;</span>) &#123; idx1 = i; idx2 = j; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : m) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (idx1 - <span class="number">1</span> &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            s[idx1][idx2] = s[idx1 - <span class="number">1</span>][idx2]; --idx1; s[idx1][idx2] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (idx1 + <span class="number">1</span> &gt; <span class="number">4</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            s[idx1][idx2] = s[idx1 + <span class="number">1</span>][idx2]; ++idx1; s[idx1][idx2] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (idx2 - <span class="number">1</span> &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            s[idx1][idx2] = s[idx1][idx2 - <span class="number">1</span>]; --idx2; s[idx1][idx2] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (idx2 + <span class="number">1</span> &gt; <span class="number">4</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            s[idx1][idx2] = s[idx1][idx2 + <span class="number">1</span>]; ++idx2; s[idx1][idx2] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">//freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="keyword">char</span> tmp = <span class="number">0</span>; <span class="keyword">int</span> case_ctr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tmp=<span class="built_in">getchar</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="string">&#x27;Z&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">char</span> square[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">        <span class="built_in">memset</span>(square, <span class="string">&#x27; &#x27;</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(square));</span><br><span class="line">        square[<span class="number">0</span>][<span class="number">0</span>] = tmp;</span><br><span class="line">        <span class="keyword">int</span> idx1 = <span class="number">0</span>, idx2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx1 &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            tmp = <span class="built_in">getchar</span>();</span><br><span class="line">            <span class="keyword">if</span> (tmp == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                ++idx1;</span><br><span class="line">                idx2 = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                square[idx1][idx2] = tmp;</span><br><span class="line">                ++idx2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        string move; </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span> tmp; tmp = <span class="built_in">getchar</span>();</span><br><span class="line">            <span class="keyword">if</span> (tmp == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (tmp != <span class="string">&#x27;\n&#x27;</span>) move.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">getchar</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (case_ctr != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Puzzle #%d:\n&quot;</span>, ++case_ctr);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">movesquare</span>(square, move)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c %c %c %c %c\n&quot;</span>, square[<span class="number">0</span>][<span class="number">0</span>], square[<span class="number">0</span>][<span class="number">1</span>], square[<span class="number">0</span>][<span class="number">2</span>], square[<span class="number">0</span>][<span class="number">3</span>], square[<span class="number">0</span>][<span class="number">4</span>]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c %c %c %c %c\n&quot;</span>, square[<span class="number">1</span>][<span class="number">0</span>], square[<span class="number">1</span>][<span class="number">1</span>], square[<span class="number">1</span>][<span class="number">2</span>], square[<span class="number">1</span>][<span class="number">3</span>], square[<span class="number">1</span>][<span class="number">4</span>]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c %c %c %c %c\n&quot;</span>, square[<span class="number">2</span>][<span class="number">0</span>], square[<span class="number">2</span>][<span class="number">1</span>], square[<span class="number">2</span>][<span class="number">2</span>], square[<span class="number">2</span>][<span class="number">3</span>], square[<span class="number">2</span>][<span class="number">4</span>]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c %c %c %c %c\n&quot;</span>, square[<span class="number">3</span>][<span class="number">0</span>], square[<span class="number">3</span>][<span class="number">1</span>], square[<span class="number">3</span>][<span class="number">2</span>], square[<span class="number">3</span>][<span class="number">3</span>], square[<span class="number">3</span>][<span class="number">4</span>]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c %c %c %c %c\n&quot;</span>, square[<span class="number">4</span>][<span class="number">0</span>], square[<span class="number">4</span>][<span class="number">1</span>], square[<span class="number">4</span>][<span class="number">2</span>], square[<span class="number">4</span>][<span class="number">3</span>], square[<span class="number">4</span>][<span class="number">4</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;This puzzle has no final configuration.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用一个二维char数组储存表格</span></span><br><span class="line"><span class="comment">//用getchar()来处理输入，输入tmp；如果输入tmp=z，就break，如果tmp！=z，五个scanf输入</span></span><br><span class="line"><span class="comment">//用一个char move[]储存步骤</span></span><br><span class="line"><span class="comment">//编写一个移动函数，首先查找&#x27; &#x27;的idx1，idx2（两个循环），然后写一个if else进行移动。</span></span><br></pre></td></tr></table></figure><p>改用vector和string写之后40min AC（忘了加cin.get()是主要耗时）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#define _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> vector&lt;string&gt; &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : s) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c %c %c %c %c\n&quot;</span>, i[<span class="number">0</span>], i[<span class="number">1</span>], i[<span class="number">2</span>], i[<span class="number">3</span>], i[<span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">moveSquare</span><span class="params">(vector&lt;string&gt; &amp;s,<span class="keyword">const</span> string &amp;m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> idx1 = <span class="number">0</span>, idx2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j] == <span class="string">&#x27; &#x27;</span>) &#123; idx1 = i; idx2 = j; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : m) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (idx1 - <span class="number">1</span> &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123; s[idx1][idx2] = s[idx1 - <span class="number">1</span>][idx2]; --idx1; s[idx1][idx2] = <span class="string">&#x27; &#x27;</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (idx1 + <span class="number">1</span> &gt; <span class="number">4</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123; s[idx1][idx2] = s[idx1 + <span class="number">1</span>][idx2]; ++idx1; s[idx1][idx2] = <span class="string">&#x27; &#x27;</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (idx2 - <span class="number">1</span> &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123; s[idx1][idx2] = s[idx1][idx2 - <span class="number">1</span>]; --idx2; s[idx1][idx2] = <span class="string">&#x27; &#x27;</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;R&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (idx2 + <span class="number">1</span> &gt; <span class="number">4</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123; s[idx1][idx2] = s[idx1][idx2 + <span class="number">1</span>]; ++idx2; s[idx1][idx2] = <span class="string">&#x27; &#x27;</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="keyword">int</span> case_ctr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        vector&lt;string&gt; square; string tmp;</span><br><span class="line">        <span class="built_in">getline</span>(cin, tmp);</span><br><span class="line">        <span class="keyword">if</span> (tmp[<span class="number">0</span>] == <span class="string">&#x27;Z&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        square.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">getline</span>(cin, tmp);</span><br><span class="line">            square.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : square) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.<span class="built_in">size</span>() == <span class="number">4</span>) i.<span class="built_in">push_back</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        string move;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            string tmp; cin &gt;&gt; tmp;</span><br><span class="line">            move += tmp;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!move.<span class="built_in">empty</span>() &amp;&amp; move.<span class="built_in">back</span>() != <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        cin.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (case_ctr != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Puzzle #%d:\n&quot;</span>, ++case_ctr);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">moveSquare</span>(square, move)) &#123;</span><br><span class="line">            <span class="built_in">print</span>(square);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;This puzzle has no final configuration.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>严蔚敏 《数据结构》第三章栈和队列 3.4节循环队列——队列的顺序表示和实现 C++实现</title>
      <link href="/20210620/%E4%B8%A5%E8%94%9A%E6%95%8F%20%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%203.4%E8%8A%82%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%AE%9E%E7%8E%B0%20C++%E5%AE%9E%E7%8E%B0/"/>
      <url>/20210620/%E4%B8%A5%E8%94%9A%E6%95%8F%20%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%203.4%E8%8A%82%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E2%80%94%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%AE%9E%E7%8E%B0%20C++%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="严蔚敏-《数据结构》第三章栈和队列-3-4节循环队列——队列的顺序表示和实现-C-实现"><a href="#严蔚敏-《数据结构》第三章栈和队列-3-4节循环队列——队列的顺序表示和实现-C-实现" class="headerlink" title="严蔚敏 《数据结构》第三章栈和队列 3.4节循环队列——队列的顺序表示和实现 C++实现"></a>严蔚敏 《数据结构》第三章栈和队列 3.4节循环队列——队列的顺序表示和实现 C++实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sq_queue.h</span></span><br><span class="line"><span class="comment">// 循环队列</span></span><br><span class="line"><span class="comment">// by Envirian</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SQ_QUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQ_QUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 怠惰ing</span></span><br><span class="line"><span class="keyword">using</span> QElemType = <span class="keyword">int</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqQueueClass</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> kMAXQSIZE = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// front_==rear_表示队列为空，rear_的下一个元素为head_表示队列满了</span></span><br><span class="line">    <span class="comment">// 用取余运算来实现循环</span></span><br><span class="line">    vector&lt;QElemType&gt; queue_;</span><br><span class="line">    <span class="keyword">int</span> front_;</span><br><span class="line">    <span class="keyword">int</span> rear_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SqQueueClass</span>()</span><br><span class="line">        : queue_&#123;vector&lt;QElemType&gt;(kMAXQSIZE)&#125;, front_&#123;<span class="number">0</span>&#125;, rear_&#123;<span class="number">0</span>&#125; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear_ - front_ + kMAXQSIZE) % kMAXQSIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(<span class="keyword">const</span> QElemType&amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((rear_ + <span class="number">1</span>) % kMAXQSIZE == front_)</span><br><span class="line">            <span class="comment">// 队列满了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        queue_[rear_] = e;</span><br><span class="line">        rear_         = (rear_ + <span class="number">1</span>) % kMAXQSIZE;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(QElemType&amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front_ == rear_)</span><br><span class="line">            <span class="comment">// 队列为空</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        e      = queue_[front_];</span><br><span class="line">        front_ = (front_ + <span class="number">1</span>) % kMAXQSIZE;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>严蔚敏 《数据结构》第二章线性表 2.2节线性表的顺序表示 C++实现</title>
      <link href="/20210620/%E4%B8%A5%E8%94%9A%E6%95%8F%20%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%BA%BF%E6%80%A7%E8%A1%A8%202.2%E8%8A%82%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA%20C++%E5%AE%9E%E7%8E%B0/"/>
      <url>/20210620/%E4%B8%A5%E8%94%9A%E6%95%8F%20%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%BA%BF%E6%80%A7%E8%A1%A8%202.2%E8%8A%82%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA%20C++%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="严蔚敏-《数据结构》第二章线性表-2-2节线性表的顺序表示-C-实现"><a href="#严蔚敏-《数据结构》第二章线性表-2-2节线性表的顺序表示-C-实现" class="headerlink" title="严蔚敏 《数据结构》第二章线性表 2.2节线性表的顺序表示 C++实现"></a>严蔚敏 《数据结构》第二章线性表 2.2节线性表的顺序表示 C++实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sq_list.h</span></span><br><span class="line"><span class="comment">// By Envirian</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SQ_LIST_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQ_LIST_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> Status              = <span class="keyword">int</span>;  <span class="comment">// 返回值类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> TRUE            = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> FALSE           = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> OK              = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ERROE           = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INFEASIBLE      = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kLIST_INIT_SIZE = <span class="number">100</span>;  <span class="comment">// 线性表的初始容量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kLISTINCREASE   = <span class="number">10</span>;   <span class="comment">// 线性表的容量增量</span></span><br><span class="line"><span class="keyword">using</span> ElemType            = <span class="keyword">int</span>;  <span class="comment">// 数据项类型</span></span><br><span class="line"><span class="comment">// 线性表，支持插入、删除、查找、随机访问操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqList</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ElemType* elem_&#123;<span class="literal">nullptr</span>&#125;;  <span class="comment">// 储存空间基址</span></span><br><span class="line">    <span class="keyword">int</span> length_&#123;<span class="number">0</span>&#125;;            <span class="comment">// 当前长度（元素个数）</span></span><br><span class="line">    <span class="keyword">int</span> list_size_&#123;<span class="number">0</span>&#125;;         <span class="comment">// 当前容量（可以容纳的元素个数）</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Status <span class="title">InitList</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 顺序线性表的初始化</span></span><br><span class="line">        elem_ = <span class="keyword">new</span> ElemType[kLIST_INIT_SIZE];</span><br><span class="line">        <span class="keyword">if</span> (!elem_)</span><br><span class="line">            <span class="keyword">return</span> FALSE;  <span class="comment">// 存储分配失败</span></span><br><span class="line">        length_    = <span class="number">0</span>;</span><br><span class="line">        list_size_ = kLIST_INIT_SIZE;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">ListInsert</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">const</span> ElemType&amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 在顺序线性表的第i个位置之前插入新的元素e</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; length_)</span><br><span class="line">            <span class="keyword">return</span> ERROE;</span><br><span class="line">        <span class="keyword">if</span> (length_ &gt;= list_size_) &#123;</span><br><span class="line">            <span class="comment">// 容量已满，重新分配。</span></span><br><span class="line">            <span class="comment">// 不使用realloc的话，这需要一个Resize()函数来实现。</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">Resize</span>(list_size_ + kLISTINCREASE))</span><br><span class="line">                <span class="keyword">return</span> FALSE;</span><br><span class="line">        &#125;</span><br><span class="line">        ElemType* q = &amp;elem_[i];  <span class="comment">// q为插入位置</span></span><br><span class="line">        <span class="keyword">for</span> (ElemType* p = &amp;elem_[length_ - <span class="number">1</span>]; p &gt;= q; --p) &#123;</span><br><span class="line">            <span class="comment">// 从最后一个元素开始，每个元素后移一位，直到插入位置。</span></span><br><span class="line">            *(p + <span class="number">1</span>) = *p;</span><br><span class="line">        &#125;</span><br><span class="line">        *q = e;     <span class="comment">// 插入数据项</span></span><br><span class="line">        ++length_;  <span class="comment">// 长度+1</span></span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">Resize</span><span class="params">(<span class="keyword">int</span> new_size)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 上面插入函数中的Resieze()，改变线性表的容量。</span></span><br><span class="line">        <span class="keyword">if</span> (new_size &lt;= list_size_)</span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ElemType* new_elem = <span class="keyword">new</span> ElemType[new_size];</span><br><span class="line">            <span class="keyword">if</span> (!new_elem)</span><br><span class="line">                <span class="keyword">return</span> FALSE;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; list_size_; ++k) &#123;</span><br><span class="line">                new_elem[k] = elem_[k];</span><br><span class="line">            &#125;</span><br><span class="line">            list_size_ = new_size;</span><br><span class="line">            std::<span class="built_in">swap</span>(elem_, new_elem);</span><br><span class="line">            <span class="keyword">delete</span>[] new_elem;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">ListDelete</span><span class="params">(<span class="keyword">int</span> i, ElemType&amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 在线性表中删除第i个元素，并用e返回其值</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= length_)</span><br><span class="line">            <span class="keyword">return</span> ERROE;         <span class="comment">// i值不合法</span></span><br><span class="line">        ElemType* p = &amp;elem_[i];  <span class="comment">// 要删除的元素地址</span></span><br><span class="line">        e           = *p;</span><br><span class="line">        ElemType* q = elem_ + length_;</span><br><span class="line">        <span class="keyword">for</span> (++p; p &lt; q; ++p) &#123;</span><br><span class="line">            <span class="comment">// 从要删除元素位置的下一个位置开始，前移一位，直到到达末尾</span></span><br><span class="line">            *(p - <span class="number">1</span>) = *p;</span><br><span class="line">        &#125;</span><br><span class="line">        --length_;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(<span class="keyword">const</span> ElemType&amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 查找元素e第一次出现的位置，没有找到则返回-1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length_; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (elem_[i] == e) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">GetElem</span><span class="params">(<span class="keyword">int</span> i, ElemType&amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 获取第i个位置的元素,存放到e中</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= length_)</span><br><span class="line">            <span class="keyword">return</span> ERROE;  <span class="comment">// i值不合法</span></span><br><span class="line">        e = elem_[i];</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 获取线性表大小</span></span><br><span class="line">        <span class="keyword">return</span> length_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 归并合并例程</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> Status <span class="title">MergeList</span><span class="params">(<span class="keyword">const</span> SqList&amp; a, <span class="keyword">const</span> SqList&amp; b, SqList&amp; c)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">MergeList</span><span class="params">(<span class="keyword">const</span> SqList&amp; a, <span class="keyword">const</span> SqList&amp; b, SqList&amp; c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 线性表a和b的元素按值非递减排列</span></span><br><span class="line">    <span class="comment">// 归并到c中，也按照值非递减排列</span></span><br><span class="line">    <span class="keyword">if</span> (!c.elem_)</span><br><span class="line">        <span class="keyword">delete</span>[] c.elem_;  <span class="comment">// 清空线性表c</span></span><br><span class="line">    ElemType *pa = a.elem_, *pb = b.elem_;</span><br><span class="line">    c.list_size_ = c.length_ = a.length_ + b.length_;</span><br><span class="line">    ElemType* pc = c.elem_ = <span class="keyword">new</span> ElemType[c.list_size_];</span><br><span class="line">    <span class="keyword">if</span> (!c.elem_)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    ElemType *pa_last = a.elem_ + a.length_, *pb_last = b.elem_ + b.length_;</span><br><span class="line">    <span class="keyword">while</span> (pa &lt; pa_last &amp;&amp; pb &lt; pb_last) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*pa &lt; *pb)</span><br><span class="line">            *pc++ = *pa++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            *pc++ = *pb++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (pa &lt; pa_last)</span><br><span class="line">        *pc++ = *pa++;  <span class="comment">// 插入a的剩余元素</span></span><br><span class="line">    <span class="keyword">while</span> (pb &lt; pb_last)</span><br><span class="line">        *pc++ = *pb++;  <span class="comment">// 插入b的剩余元素</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二分法的专题总结——到底应该写小于还是小于等于、两个判断还是三个判断</title>
      <link href="/20210620/%E4%BA%8C%E5%88%86%E6%B3%95%E7%9A%84%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E5%86%99%E5%B0%8F%E4%BA%8E%E8%BF%98%E6%98%AF%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E%E3%80%81%E4%B8%A4%E4%B8%AA%E5%88%A4%E6%96%AD%E8%BF%98%E6%98%AF%E4%B8%89%E4%B8%AA%E5%88%A4%E6%96%AD/"/>
      <url>/20210620/%E4%BA%8C%E5%88%86%E6%B3%95%E7%9A%84%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E5%86%99%E5%B0%8F%E4%BA%8E%E8%BF%98%E6%98%AF%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E%E3%80%81%E4%B8%A4%E4%B8%AA%E5%88%A4%E6%96%AD%E8%BF%98%E6%98%AF%E4%B8%89%E4%B8%AA%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="二分法的专题总结"><a href="#二分法的专题总结" class="headerlink" title="二分法的专题总结"></a>二分法的专题总结</h2><p>二分法的本质是：寻找序列中第一个满足某条件的元素的位置。</p><p>二分法中通常让人迷惑的地方不外乎<br>（1）while中什么时候写小于等于，什么时候不写等于；<br>（2）while内部是写两个条件还是三个条件。</p><p>首先考虑升序排列的元素（降序等价，不去考虑了），应当分为两种情况：（1）没有重复元素；（2）有重复元素。后者是前者的一般化，也就是说后者的算法也同样适用于前者。</p><p>（1）没有重复元素<br>这种情况下的问题一般是：查找某个元素target在序列中是否出现，如果出现则返回出现的序号，如果不出现，则返回-1。也就是确定一个区间[x,x]，target就是x位置的元素，如果没有这个元素，那么确定出来的区间是[x+1,x]，左边界大于右边界，也就是区间中不存在元素。</p><p>（2）有重复元素<br>这种情况下的问题则是，确定第一个大于等于target的元素序号，和第一个大于target的元素序号，两个子问题。等价于确定一个区间[x,y)，这个区间里面的元素都等于target。如果没有target，那么确定出来的区间应该是[x,x)，也就是不区间中不存在元素。</p><p>没有重复元素的二分查找代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">const</span> std::vector&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = a.<span class="built_in">size</span>() - <span class="number">1</span>, mid;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] == target)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &lt; target)</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，需要注意的地方有三个：（1）while的条件是left==right；（2）while中是三个判断，并且其中一个判断是a[mid]&lt;target，而不是a[mid]&lt;=target；（3）right=a.size()-1而不是a.size()</p><p>对于（1）没有重复元素，所以当left&gt;right的时候就代表了没有找到。这里是不重复元素这种特殊情况的写法。在下面的重复元素的例子中可以看到，这里其实也可以不这么写。</p><p>对于（2），三个判断也是不重复元素的特殊写法。因为找到了需要的值马上就返回了，所以有第一个if判断。在后面有重复元素的情况是没有第一个if判断的。有了第一个if判断，就把等于的情况分离出来了，所以是三个if else，对应等于、小于和大于。当第8行a[mid]&lt;target条件判断成立时，说明target一定在mid点的右边（不包括mid），所以下面是把left收缩到mid+1；同样的道理，第10行else成立的时候，target一定在mid点的左边（也不包括mid点）（因为此时target&lt;a[mid])，right收缩到mid-1.</p><p>对于（3），有两点原因：为了和（2）统一（也就是target在left和right点构成的闭区间中，而不是开区间中）所以应该a.size()-1；考虑a中的所有元素都小于target会发生什么：倒数第三轮循环的时候，end=a.size()-1,beg=a.size()，倒数第二轮循环end=a.size(),beg=a.size()，由于我们while的条件写的是beg&lt;=end，所以此时仍然会进入循环计算mid，从而越界访问了a！！！在后面重复元素的情况中可以看到，由于我们的条件写的是beg&lt;end，所以那里是写的right=a.size()</p><p>只要注意了上面三个点，元素不重复的二分查找很难写错。</p><p>有重复元素的二分查找代码如下：<br>（1）查找下界（第一个大于等于target的元素的序号，[x,y)的x）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LowerBound</span><span class="params">(<span class="keyword">const</span> std::vector&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = a.<span class="built_in">size</span>(), mid;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] &gt;= target) &#123;</span><br><span class="line">            <span class="comment">// 中间的数大于等于target，往左子区间[left,mid]查找</span></span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 中间的数小于target，往右子区间[mid+1,right]查找</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// left==right，返回哪一个都可以</span></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）查找上界（第一个大于target的元素的序号，[x,y)的y）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UpperBound</span><span class="params">(<span class="keyword">const</span> std::vector&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = a.<span class="built_in">size</span>(), mid;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] &gt; target) &#123;</span><br><span class="line">            <span class="comment">// 中间的数大于target，往左子区间[left,mid]查找</span></span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 中间的数小于等于target，往右子区间[mid+1,right]查找</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// left==right，返回哪一个都可以</span></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面两个函数就确定了target的界。</p><p>LowerBound中，我们确定了第一个大于等于target的元素，UpperBound中，我们确定了第一个大于target的元素。</p><p>对于不重复的情况，就有：<br>target在nums中存在时：<br><code>nums[UpperBound(nums,target)]==target</code><br>并且有：<br><code>BinarySearch(nums,target)==UpperBound(nums,target)</code><br>target在nums中不存在时：<br><code>nums[UpperBound(nums,target)]!=target</code><br>所以说有重复元素的情况是没有重复元素情况的一般化。<br>上面的三段代码也说明了，有重复元素的二分更容易写在一个函数里面，而不是作为一个单独的函数（重复元素的二分只有一个return出口，而非重复元素的二分有两个），并且条件判断很容易，所以后面一种代码或许更加好用。（刷PAT得到的感觉）</p><p>为什么LowerBound中的a[mid]&gt;=target时right=mid而a[mid]&lt;target时left=mid+1和为什么UpperBound中的a[mid]&gt;target时right=mid而a[mid]&lt;=target时left=mid+1在注释中已经说得很清楚了。如果我们把LowerBound中的判断条件写成下面这样会怎么样呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a[mid] &gt; target) &#123;</span><br><span class="line">    <span class="comment">// 中间的数大于target，往左子区间[left,mid-1]查找</span></span><br><span class="line">    right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 中间的数小于等于target，往右子区间[mid,right]查找</span></span><br><span class="line">    left = mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一看很有道理，但是不要忘了我们LowerBound要解决的问题：寻找第一个大于等于target的元素。如果a中没有target的话，会返回离target最近的小于target的元素坐标，如果a中有target，情况会更糟：死循环。考虑当a[right]=target，而a[left]&lt;target，并且left=right-1的情况，此时mid的计算结果为left，而每次判断都会进入第二个分支，也就是left=left，永远不会跳出循环。UpperBound函数中也有类似的问题。</p><p>当a中的所有元素都小于target时，LowerBound和UpperBound的最终的结果都是left和right和a.size()三者相等，也就是得到了a中最后一个元素之后元素的位置。（这也就说明了为什么要初始化成right=a.size()）</p><p>当a中的所有元素都大于target的时候，LowerBound和UpperBound都返回0，此时第一个大于target的元素也就是a[0]。</p><p>有了上面对二分法和LowerBound和UpperBound的理解之后，就可以用stl中的的lower_bound函数和upper_bound函数了，CSDN上有介绍：<a href="https://blog.csdn.net/qq_40160605/article/details/80150252">关于lower_bound( )和upper_bound( )的常见用法</a></p><p>参考文献《算法笔记》第二版 胡凡</p>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>严蔚敏 《数据结构》第二章线性表 2.3节线性表的链式表示 C++实现</title>
      <link href="/20210620/%E4%B8%A5%E8%94%9A%E6%95%8F%20%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%BA%BF%E6%80%A7%E8%A1%A8%202.3%E8%8A%82%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E8%A1%A8%E7%A4%BA%20C++%E5%AE%9E%E7%8E%B0/"/>
      <url>/20210620/%E4%B8%A5%E8%94%9A%E6%95%8F%20%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%BA%BF%E6%80%A7%E8%A1%A8%202.3%E8%8A%82%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E8%A1%A8%E7%A4%BA%20C++%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="严蔚敏-《数据结构》第二章线性表-2-3节线性表的链式表示-C-实现"><a href="#严蔚敏-《数据结构》第二章线性表-2-3节线性表的链式表示-C-实现" class="headerlink" title="严蔚敏 《数据结构》第二章线性表 2.3节线性表的链式表示 C++实现"></a>严蔚敏 《数据结构》第二章线性表 2.3节线性表的链式表示 C++实现</h2><p>代码没有怎么测试过，可能有些地方有BUG</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// link_list.h</span></span><br><span class="line"><span class="comment">// By Envirian</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LINK_LIST_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINK_LIST_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> Status         = <span class="keyword">int</span>;  <span class="comment">// 返回值类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> TRUE       = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> FALSE      = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> OK         = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ERROR      = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INFEASIBLE = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">using</span> ElemType       = <span class="keyword">int</span>;  <span class="comment">// 数据项类型</span></span><br><span class="line"><span class="comment">// LinkList为带头节点的单链表，第0个元素不储存信息，第1个元素开始储存信息</span></span><br><span class="line"><span class="comment">// 使用之前必须先调用InitList()!!!!!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        ElemType data;</span><br><span class="line">        LNode* next&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 以下是P37到P38的函数</span></span><br><span class="line">    <span class="function">Status <span class="title">InitList</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 构造一个空的线性链表</span></span><br><span class="line">        <span class="keyword">if</span> (head_)</span><br><span class="line">            <span class="keyword">return</span> ERROR;  <span class="comment">// 已经存在线性链表了</span></span><br><span class="line">        head_ = <span class="keyword">new</span> LNode;</span><br><span class="line">        tail_ = <span class="literal">nullptr</span>;</span><br><span class="line">        len_  = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">DestroyList</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 销毁线性链表，使其回到InitList()之前的状态，并释放空间</span></span><br><span class="line">        <span class="keyword">if</span> (!head_)</span><br><span class="line">            <span class="keyword">return</span> OK;</span><br><span class="line">        LNode* p = head_;</span><br><span class="line">        <span class="comment">// 回到初始化之前状态</span></span><br><span class="line">        head_ = tail_ = <span class="literal">nullptr</span>;</span><br><span class="line">        len_          = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 释放空间</span></span><br><span class="line">        LNode* q = p-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            <span class="keyword">delete</span> p;</span><br><span class="line">            p = q;</span><br><span class="line">            q = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">ClearList</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 将线性链表重置为初始化后的空表</span></span><br><span class="line">        <span class="built_in">DestroyList</span>();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">InitList</span>())</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">InsFirst</span><span class="params">(<span class="keyword">const</span> ElemType&amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 把e插入到链表头部</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">ListInsert</span>(<span class="number">1</span>, e))</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">DelFirst</span><span class="params">(ElemType&amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 删除链表的第一个节点并以e返回</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">ListDelete</span>(<span class="number">1</span>, e))</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">InsLast</span><span class="params">(<span class="keyword">const</span> ElemType&amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">ListInsert</span>(len_ + <span class="number">1</span>, e))</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">DelLast</span><span class="params">(ElemType&amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 删除链表的尾节点并以e返回</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">ListDelete</span>(len_, e))</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">GetHead</span><span class="params">(ElemType&amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 获取第一个元素，用e返回</span></span><br><span class="line">        <span class="keyword">if</span> (!head_-&gt;next)</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        e = head_-&gt;next-&gt;data;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">GetBack</span><span class="params">(ElemType&amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 获取最后一个元素，用e返回</span></span><br><span class="line">        <span class="keyword">if</span> (!tail_)</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        e = tail_-&gt;data;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">ListEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 若链表为空表，则返回TRUE，否则返回FALSE</span></span><br><span class="line">        <span class="keyword">if</span> (len_ == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> TRUE;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 返回线性表中的元素个数</span></span><br><span class="line">        <span class="keyword">return</span> len_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下是P29到P31的函数</span></span><br><span class="line">    <span class="function">Status <span class="title">GetElem</span><span class="params">(<span class="keyword">int</span> i, ElemType&amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 当第i个元素存在时，其值赋给e并返回OK，否则返回ERROR</span></span><br><span class="line">        LNode* p = head_-&gt;next;</span><br><span class="line">        <span class="keyword">int</span> ctr  = <span class="number">1</span>;           <span class="comment">// 初始化，p指向第一个节点，ctr为计数器</span></span><br><span class="line">        <span class="keyword">while</span> (p &amp;&amp; ctr &lt; i) &#123;  <span class="comment">// 顺指针向后查找，直到p指向第i个元素或p为空</span></span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            ++ctr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!p || ctr &gt; i)</span><br><span class="line">            <span class="keyword">return</span> ERROR;  <span class="comment">// 第i个元素不存在</span></span><br><span class="line">        e = p-&gt;data;       <span class="comment">// 取第i个元素</span></span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">ListInsert</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">const</span> ElemType&amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 在带头结点的单链线性表中第i个位置之前插入元素e</span></span><br><span class="line">        LNode* p = head_;</span><br><span class="line">        <span class="keyword">int</span> ctr  = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &amp;&amp; ctr &lt; i - <span class="number">1</span>) &#123;  <span class="comment">// 寻找i-1个节点</span></span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            ++ctr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!p || ctr &gt; i - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> ERROR;      <span class="comment">// i大于表长加1或i小于1</span></span><br><span class="line">        LNode* s = <span class="keyword">new</span> LNode;  <span class="comment">// 生成新节点</span></span><br><span class="line">        s-&gt;data  = e;          <span class="comment">// 赋值</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">            tail_ = s;      <span class="comment">// 如果是插入后成为最后一个节点，更新尾节点</span></span><br><span class="line">        s-&gt;next = p-&gt;next;  <span class="comment">// 插入L中，注意顺序</span></span><br><span class="line">        p-&gt;next = s;</span><br><span class="line">        ++len_;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">ListDelete</span><span class="params">(<span class="keyword">int</span> i, ElemType&amp; e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 在带头结点的单链线性表L中，删除第i个元素，并由e返回其值</span></span><br><span class="line">        LNode* p = head_;</span><br><span class="line">        <span class="keyword">int</span> ctr  = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;next &amp;&amp; ctr &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 寻找第i个节点并令p指向其前驱</span></span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            ++ctr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!p-&gt;next || ctr &gt; i - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> ERROR;  <span class="comment">// 删除位置不合理</span></span><br><span class="line">        <span class="keyword">if</span> (!p-&gt;next-&gt;next)</span><br><span class="line">            tail_ = p;       <span class="comment">// 如果要删除的是尾节点，那么更新尾节点</span></span><br><span class="line">        LNode* q = p-&gt;next;  <span class="comment">// 删除并释放节点</span></span><br><span class="line">        p-&gt;next  = q-&gt;next;</span><br><span class="line">        e        = q-&gt;data;</span><br><span class="line">        <span class="keyword">delete</span> q;</span><br><span class="line">        --len_;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">CreateList</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 逆位序输入n个元素的值，建立带表头结点的单链线性表(头插法)</span></span><br><span class="line">        <span class="keyword">if</span> (head_)</span><br><span class="line">            <span class="keyword">return</span> ERROR;  <span class="comment">// 单链线性表非空</span></span><br><span class="line">        <span class="comment">// TODO(@Envirian): 等写了清空操作之后把这里改写成先清空</span></span><br><span class="line">        head_ = <span class="keyword">new</span> LNode;  <span class="comment">// 建立带头结点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            LNode* p = <span class="keyword">new</span> LNode;  <span class="comment">// 生成新节点</span></span><br><span class="line">            cin &gt;&gt; (p-&gt;data);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                tail_ = p;              <span class="comment">// 第一个插入的节点也是尾节点</span></span><br><span class="line">            p-&gt;next     = head_-&gt;next;  <span class="comment">// 放到表头</span></span><br><span class="line">            head_-&gt;next = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    LNode* head_&#123;<span class="literal">nullptr</span>&#125;;  <span class="comment">// 头节点</span></span><br><span class="line">    LNode* tail_&#123;<span class="literal">nullptr</span>&#125;;  <span class="comment">// 尾节点</span></span><br><span class="line">    <span class="keyword">int</span> len_&#123;<span class="number">0</span>&#125;;            <span class="comment">// 线性表中数据元素的个数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并查集专题 杭电OJ1232 灵巧求并和路径压缩</title>
      <link href="/20210620/%E5%B9%B6%E6%9F%A5%E9%9B%86%E4%B8%93%E9%A2%98%20%E6%9D%AD%E7%94%B5OJ1232%20%E7%81%B5%E5%B7%A7%E6%B1%82%E5%B9%B6%E5%92%8C%E8%B7%AF%E5%BE%84%E5%8E%8B%E7%BC%A9/"/>
      <url>/20210620/%E5%B9%B6%E6%9F%A5%E9%9B%86%E4%B8%93%E9%A2%98%20%E6%9D%AD%E7%94%B5OJ1232%20%E7%81%B5%E5%B7%A7%E6%B1%82%E5%B9%B6%E5%92%8C%E8%B7%AF%E5%BE%84%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<p>并查集也叫不相交集合，可以描述把一个集合通过等价关系（满足自反性、对称性和传递性的关系）划分为若干个等价类这一过程。并查集只有两个操作find和union: find返回一个元素所属的等价类，union合并两个元素所在的等价类。</p><p>以杭电OJ1232题为例，说明并查集的两种实现和后一种实现的两种优化方法。</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1232">题目链接</a></p><p>第一种实现，数组的每个元素储存它所在等价类的名字。find历程只要返回元素坐标的值就好了；而union历程则遍历数组进行修改。</p><p>对于连续的N次find操作或union操作，这种实现需要的时间分别为O(N)和O(N^2)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> bjset[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bjset_find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bjset[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bjset_union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> classx = <span class="built_in">bjset_find</span>(x);</span><br><span class="line">    <span class="keyword">int</span> classy = <span class="built_in">bjset_find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (classx != classy) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bjset[i] == classx)</span><br><span class="line">                bjset[i] = classy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) bjset[i] = i;<span class="comment">//初始化并查集</span></span><br><span class="line">        <span class="keyword">int</span> m; cin &gt;&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            <span class="built_in">bjset_union</span>(x, y, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ctr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bjset[i] == i) ++ctr;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ctr - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种实现，用树的结构，根节点指向自己。find历程只要迭代以返回根节点就可以了，union历程也只要合并根节点。</p><p>对于连续的N次find操作或union操作，这种实现需要的时间最坏情况分别为O(N^2)和O(N)，但是由于树退化成链表的情况很少出现，因此这种实现比上一种实现更快，并且我们还有两种方法来优化这种实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> bjset[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bjset_find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (bjset[x] != x) x = bjset[x];</span><br><span class="line">    <span class="keyword">return</span> bjset[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bjset_union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rootx = <span class="built_in">bjset_find</span>(x);</span><br><span class="line">    <span class="keyword">int</span> rooty = <span class="built_in">bjset_find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (rootx != rooty) &#123;</span><br><span class="line">        bjset[rootx] = rooty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) bjset[i] = i;</span><br><span class="line">        <span class="keyword">int</span> m; cin &gt;&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            <span class="built_in">bjset_union</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ctr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            bjset[i] == i ? (++ctr) : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ctr - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种优化方法叫灵活求并，优化了union历程中树的合并，使得树的高度得到控制。我们可以让节点指向负值来表示节点是根节点，并且用负的多少来表示这棵树的元素多少或树的高度（这两种策略分别叫做按大小的灵活求并和按高度/秩的灵活求并），每次union操作的时候总是让绝对值小的树的根指向大的树的根。</p><p>下面的代码用根节点指向负值的策略来使存储更多信息成为可能。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> bjset[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bjset_find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (bjset[x] &gt;= <span class="number">0</span>) x = bjset[x];<span class="comment">//find的写法有变化</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bjset_union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rootx = <span class="built_in">bjset_find</span>(x);</span><br><span class="line">    <span class="keyword">int</span> rooty = <span class="built_in">bjset_find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (rootx != rooty) &#123;</span><br><span class="line">        bjset[rootx] = rooty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) bjset[i] = <span class="number">-1</span>;<span class="comment">//初始化的方法不同</span></span><br><span class="line">        <span class="keyword">int</span> m; cin &gt;&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            <span class="built_in">bjset_union</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ctr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            bjset[i] == <span class="number">-1</span> ? (++ctr) : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ctr - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>灵活求并，主要是union例程的变化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> bjset[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bjset_find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (bjset[x] &gt;= <span class="number">0</span>) x = bjset[x];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bjset_union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rootx = <span class="built_in">bjset_find</span>(x);</span><br><span class="line">    <span class="keyword">int</span> rooty = <span class="built_in">bjset_find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (rootx == rooty) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (bjset[rootx] &gt; bjset[rooty]) &#123;</span><br><span class="line">        bjset[rootx] = rooty;</span><br><span class="line">        (bjset[rooty])--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (bjset[rootx] &lt;= bjset[rooty]) &#123;</span><br><span class="line">        bjset[rooty] = rootx;</span><br><span class="line">        (bjset[rootx])--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) bjset[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> m; cin &gt;&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            <span class="built_in">bjset_union</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ctr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            bjset[i] &lt; <span class="number">0</span> ? (++ctr) : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ctr - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种优化的方法叫路径压缩，其思路是每次进行find例程的时候都让路径上的节点指向根节点，从而使树的高度得到减少。下面的两段代码把路径压缩和灵巧求并写在一起了，分别是路径压缩的迭代实现和递归实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> bjset[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bjset_find</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//递归实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bjset[x] &gt; <span class="number">0</span>) bjset[x] = <span class="built_in">bjset_find</span>(bjset[x]);</span><br><span class="line">    <span class="keyword">if</span> (bjset[x] &lt; <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> bjset[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bjset_union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rootx = <span class="built_in">bjset_find</span>(x);</span><br><span class="line">    <span class="keyword">int</span> rooty = <span class="built_in">bjset_find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (rootx == rooty) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (bjset[rootx] &gt; bjset[rooty]) &#123;</span><br><span class="line">        bjset[rootx] = rooty;</span><br><span class="line">        (bjset[rooty])--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (bjset[rootx] &lt;= bjset[rooty]) &#123;</span><br><span class="line">        bjset[rooty] = rootx;</span><br><span class="line">        (bjset[rootx])--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) bjset[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> m; cin &gt;&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            <span class="built_in">bjset_union</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ctr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            bjset[i] &lt; <span class="number">0</span> ? (++ctr) : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ctr - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> bjset[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bjset_find</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//迭代实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = x;</span><br><span class="line">    <span class="keyword">while</span> (bjset[r] &gt;= <span class="number">0</span>) r = bjset[r];</span><br><span class="line">    <span class="keyword">while</span> (bjset[x] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = x;</span><br><span class="line">        x = bjset[x];</span><br><span class="line">        bjset[tmp] = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bjset_union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rootx = <span class="built_in">bjset_find</span>(x);</span><br><span class="line">    <span class="keyword">int</span> rooty = <span class="built_in">bjset_find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (rootx == rooty) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (bjset[rootx] &gt; bjset[rooty]) &#123;</span><br><span class="line">        bjset[rootx] = rooty;</span><br><span class="line">        (bjset[rooty])--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (bjset[rootx] &lt;= bjset[rooty]) &#123;</span><br><span class="line">        bjset[rooty] = rootx;</span><br><span class="line">        (bjset[rootx])--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) bjset[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> m; cin &gt;&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            <span class="built_in">bjset_union</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ctr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            bjset[i] &lt; <span class="number">0</span> ? (++ctr) : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ctr - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文献<br>《数据结构与算法分析——C++语言描述》（第四版） Mark Allen Weiss  第8章 不相交集类</p>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>交大机试题目：分割一个数组为两部分，使得其两部分和的差值最小</title>
      <link href="/20210620/%E4%BA%A4%E5%A4%A7%E6%9C%BA%E8%AF%95%E9%A2%98%E7%9B%AE%EF%BC%9A%E5%88%86%E5%89%B2%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E4%B8%BA%E4%B8%A4%E9%83%A8%E5%88%86%EF%BC%8C%E4%BD%BF%E5%BE%97%E5%85%B6%E4%B8%A4%E9%83%A8%E5%88%86%E5%92%8C%E7%9A%84%E5%B7%AE%E5%80%BC%E6%9C%80%E5%B0%8F/"/>
      <url>/20210620/%E4%BA%A4%E5%A4%A7%E6%9C%BA%E8%AF%95%E9%A2%98%E7%9B%AE%EF%BC%9A%E5%88%86%E5%89%B2%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E4%B8%BA%E4%B8%A4%E9%83%A8%E5%88%86%EF%BC%8C%E4%BD%BF%E5%BE%97%E5%85%B6%E4%B8%A4%E9%83%A8%E5%88%86%E5%92%8C%E7%9A%84%E5%B7%AE%E5%80%BC%E6%9C%80%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<p>本文参考了hh_is_vegetable大佬的文章：<a href="https://blog.csdn.net/hh1986170901/article/details/105000680">文章链接</a></p><p><a href="https://www.nowcoder.com/practice/aea0458d54d74f3ca14012cbdf249918?tpId=62&tqId=31039&tPage=1&rp=1&ru=/ta/sju-kaoyan">题目链接</a></p><p><strong>描述</strong><br>一个数组中有若干正整数，将此数组划分为两个子数组，使得两个子数组各元素之和a,b的差最小，对于非法输入应该输出ERROR。<br><strong>输入描述：</strong><br>数组中的元素<br><strong>输出描述：</strong><br>降序输出两个子数组的元素和</p><p><strong>示例</strong><br>Input</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 20 30 10 10</span><br><span class="line">10 20 abc 10 10</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">40 40</span><br><span class="line">ERROR</span><br></pre></td></tr></table></figure><p><strong>思路：</strong><br>也就是求数组中哪些元素的和，能够在小于等于sum/2的条件下最大。于是，看似是01背包的题。</p><p>但是，01背包的体积V是有限制的，这里V可以很大！int范围内都可以取到，也就是需要2^32^B=4GB的空间，不可能dp。</p><p>所以考虑DFS，但是DFS的复杂度又是O(2^n^)，必须要剪枝。</p><p>下面第13行的剪枝思路真是妙到不行：先对数组从大到小排序，那么DFS的过程中，到了第<code>i</code>个元素选不选取的子问题。当前子问题的和记为<code>val</code>，最大和记为<code>max_val</code>，用于储存数据的数组为<code>vec</code>，如果<code>val+(vec.size()-i)*vec[i]&lt;=max_val</code>，那么，即使选取后面的所有元素，都不可能更新<code>max_val</code>了，所以可以直接return，非常漂亮。</p><p>另外还有一些零碎的剪枝，比如到了<code>max_val==half</code>的时候就可以一路return回去(其实，注释掉13行的剪枝和30行的排序，只用这个剪枝都能88ms左右AC，上面那个技巧性很强的剪枝可以直接压到19ms)。</p><p>这道题的IO处理也值得学习，stringstream和sscanf、sprintf一样都是处理字符串的好工具。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum,half;</span><br><span class="line"><span class="keyword">int</span> max_half=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;vec,<span class="keyword">int</span> i,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(val&gt;=max_half) max_half=val;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(i&gt;=vec.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(val+(vec.<span class="built_in">size</span>()-i)*vec[i]&lt;=max_half) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(max_half==half) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(val+vec[i]&lt;=half)&#123;</span><br><span class="line">        <span class="built_in">DFS</span>(vec,i+<span class="number">1</span>,val+vec[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(max_half==half) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">DFS</span>(vec,i+<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum=half=max_half=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:vec) sum+=i;</span><br><span class="line">    half=sum/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">sort</span>(vec.<span class="built_in">rbegin</span>(),vec.<span class="built_in">rend</span>());</span><br><span class="line">    <span class="built_in">DFS</span>(vec,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;sum-max_half&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;max_half&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string line;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(cin,line))&#123;</span><br><span class="line">        <span class="keyword">bool</span> is_valid=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:line)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!(<span class="string">&#x27;0&#x27;</span>&lt;=i&amp;&amp;i&lt;=<span class="string">&#x27;9&#x27;</span>||i==<span class="string">&#x27; &#x27;</span>))&#123;</span><br><span class="line">                is_valid=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!is_valid)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ERROR\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function">stringstream <span class="title">ss</span><span class="params">(line)</span></span>;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; vec;<span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="keyword">while</span>(ss&gt;&gt;tmp) vec.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">        <span class="built_in">Solve</span>(vec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By the way，<code>getline(cin,line)</code>的返回值是<code>cin</code>对象，所以可以像<code>while(cin&gt;&gt;tmp)&#123;&#125;</code>这样类似的写。</p>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>归并排序的递归、非递归写法和随机快排的递归写法</title>
      <link href="/20210620/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%9A%84%E9%80%92%E5%BD%92%E3%80%81%E9%9D%9E%E9%80%92%E5%BD%92%E5%86%99%E6%B3%95%E5%92%8C%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92%E7%9A%84%E9%80%92%E5%BD%92%E5%86%99%E6%B3%95/"/>
      <url>/20210620/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%9A%84%E9%80%92%E5%BD%92%E3%80%81%E9%9D%9E%E9%80%92%E5%BD%92%E5%86%99%E6%B3%95%E5%92%8C%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92%E7%9A%84%E9%80%92%E5%BD%92%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>归并排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; v, <span class="keyword">int</span> L1, <span class="keyword">int</span> R1, <span class="keyword">int</span> L2, <span class="keyword">int</span> R2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">tmp</span><span class="params">(R2 - L2 + R1 - L1 + <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i = L1, j = L2, index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= R1 &amp;&amp; j &lt;= R2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[i] &lt;= v[j])</span><br><span class="line">            tmp[index++] = v[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tmp[index++] = v[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= R1) tmp[index++] = v[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= R2) tmp[index++] = v[j++];</span><br><span class="line">    <span class="comment">// 放回v里面</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; ++i) &#123;</span><br><span class="line">        v[L1 + i] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort_1</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; v, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">MergeSort_1</span>(v, left, mid);</span><br><span class="line">        <span class="built_in">MergeSort_1</span>(v, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="built_in">Merge</span>(v, left, mid, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : v) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort_2</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; v, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> step = <span class="number">2</span>; step / <span class="number">2</span> &lt;= right - left; step *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i += step) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = i + (step - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">Merge</span>(v, i, mid, mid + <span class="number">1</span>, <span class="built_in">min</span>(right, i + step - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : v) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v = &#123;<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;########    OriginArray    ########\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : v) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;########    MergeSort_1    ########\n&quot;</span>;</span><br><span class="line">    <span class="built_in">MergeSort_1</span>(v, <span class="number">0</span>, v.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;########    MergeSort_2    ########\n&quot;</span>;</span><br><span class="line">    v = &#123;<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">MergeSort_2</span>(v, <span class="number">0</span>, v.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随机快排</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RandPartition</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 生成[left,rihgt]区间内的随机数p</span></span><br><span class="line">    <span class="keyword">int</span> p = <span class="built_in">round</span>(<span class="number">0.1</span> * <span class="built_in">rand</span>() / RAND_MAX * (right - left) + left);</span><br><span class="line">    std::<span class="built_in">swap</span>(A[left], A[p]);</span><br><span class="line">    <span class="keyword">int</span> tmp = A[left];</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">// 注意下面两个while中的第一个条件，保证了所有数都大于或者小于主元时候不非法访问</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; A[right] &gt; tmp) --right;</span><br><span class="line">        A[left] = A[right];</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; A[left] &lt;= tmp) ++left;</span><br><span class="line">        A[right] = A[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 退出时left==right</span></span><br><span class="line">    A[left] = tmp;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;  <span class="comment">//当前区间长度大于1</span></span><br><span class="line">        <span class="comment">// 获取主元坐标</span></span><br><span class="line">        <span class="keyword">int</span> pos = <span class="built_in">RandPartition</span>(A, left, right);</span><br><span class="line">        <span class="comment">// 区间通过主元坐标一分为二</span></span><br><span class="line">        <span class="built_in">QuickSort</span>(A, left, pos);</span><br><span class="line">        <span class="built_in">QuickSort</span>(A, pos + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="keyword">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v = &#123;<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;########    OriginArray    ########\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : v) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;#########    QuickSort    #########\n&quot;</span>;</span><br><span class="line">    <span class="built_in">QuickSort</span>(v, <span class="number">0</span>, v.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : v) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>桂圆儿的错题复习栈</title>
      <link href="/20210620/%E6%A1%82%E5%9C%86%E5%84%BF%E7%9A%84%E9%94%99%E9%A2%98%E5%A4%8D%E4%B9%A0%E6%A0%88/"/>
      <url>/20210620/%E6%A1%82%E5%9C%86%E5%84%BF%E7%9A%84%E9%94%99%E9%A2%98%E5%A4%8D%E4%B9%A0%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="桂圆儿的Codeforces错题集"><a href="#桂圆儿的Codeforces错题集" class="headerlink" title="桂圆儿的Codeforces错题集"></a>桂圆儿的Codeforces错题集</h2><p>开一个文章记录自己Codeforces上的错题，方便以后复习。</p><h2 id="Educational-Codeforces-Round-104-Rated-for-Div-2"><a href="#Educational-Codeforces-Round-104-Rated-for-Div-2" class="headerlink" title="Educational Codeforces Round 104 (Rated for Div. 2)"></a><a href="https://codeforces.ml/contest/1487">Educational Codeforces Round 104 (Rated for Div. 2)</a></h2><p><a href="https://codeforces.ml/contest/1487/problem/C">Problem C Minimum Ties</a><br>这道题是关于反对称矩阵的，找规律可以做出来，实现的时候没有注意边界条件导致的WA。</p><p><a href="https://codeforces.ml/contest/1487/problem/E">Problem E Cheap Dinner</a><br>这道题是dp，比赛的时候还不会写dp，现在看来应该是签到题了。</p><h2 id="PAT甲级"><a href="#PAT甲级" class="headerlink" title="PAT甲级"></a><a href="https://pintia.cn/problem-sets/994805342720868352/problems/type/7">PAT甲级</a></h2><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805458722734080">PAT 甲级 1033 To Fill or Not to Fill</a><br>情况稍微复杂一点的贪心算法</p><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805507225665536">PAT 甲级 1010 Radix</a><br>看起来是很简单的模拟实际上是边界条件很复杂的二分算法的题。</p>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>杭电OJ 1233 还是畅通工程</title>
      <link href="/20210620/%E6%9D%AD%E7%94%B5OJ%201233%20%E8%BF%98%E6%98%AF%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/"/>
      <url>/20210620/%E6%9D%AD%E7%94%B5OJ%201233%20%E8%BF%98%E6%98%AF%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="杭电OJ-1233-还是畅通工程"><a href="#杭电OJ-1233-还是畅通工程" class="headerlink" title="杭电OJ 1233 还是畅通工程"></a>杭电OJ 1233 还是畅通工程</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1233">题目链接</a><br>|Problem Description|<br>|——————-|<br>|某省调查乡村交通状况，得到的统计表中列出了任意两村庄间的距离。省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可），并要求铺设的公路总长度为最小。请计算最小的公路总长度。|</p><table><thead><tr><th>Input</th></tr></thead><tbody><tr><td>测试输入包含若干测试用例。每个测试用例的第1行给出村庄数目N ( &lt; 100 )；随后的N(N-1)/2行对应村庄间的距离，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间的距离。为简单起见，村庄从1到N编号。(当N为0时，输入结束，该用例不被处理。)</td></tr><tr><td></td></tr><tr><td>Output</td></tr><tr><td>——————-</td></tr><tr><td>对每个测试用例，在1行里输出最小的公路总长度</td></tr></tbody></table><p>这道题需要注意测试n=1的情况，当输出distance的语句写在union的for循环里的时候这种情况不能输出预期的0。</p><p><img src="https://img-blog.csdnimg.cn/20210302000656616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE5MTc3NDU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">parent</span><span class="params">(<span class="number">110</span>)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a_&#123; <span class="number">-1</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> b_&#123; <span class="number">-1</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> distance_&#123; <span class="number">-1</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Edge &amp;lhs, <span class="keyword">const</span> Edge &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.distance_ &lt; rhs.distance_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parent[x] != x) parent[x] = <span class="built_in">find</span>(parent[x]);</span><br><span class="line">    <span class="keyword">return</span> parent[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="built_in">find</span>(x);</span><br><span class="line">    <span class="keyword">int</span> b = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (a != b) parent[a] = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n) &#123;</span><br><span class="line">        <span class="comment">//边按权值排序.</span></span><br><span class="line">        <span class="keyword">int</span> m = n * (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="function">vector&lt;Edge&gt; <span class="title">edge_set</span><span class="params">(m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : edge_set) cin &gt;&gt; i.a_ &gt;&gt; i.b_ &gt;&gt; i.distance_;</span><br><span class="line">        <span class="built_in">sort</span>(edge_set.<span class="built_in">begin</span>(), edge_set.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="comment">//初始化.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> distance = <span class="number">0</span>, ctr = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//生成最小生成树</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : edge_set) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(i.a_) != <span class="built_in">find</span>(i.b_)) &#123;</span><br><span class="line">                <span class="built_in">Union</span>(i.a_, i.b_);</span><br><span class="line">                ++ctr;</span><br><span class="line">                distance += i.distance_;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ctr == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; distance &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络 网络层控制平面LS算法（Dijkstra算法） 邻接表实现</title>
      <link href="/20210620/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20%E7%BD%91%E7%BB%9C%E5%B1%82%E6%8E%A7%E5%88%B6%E5%B9%B3%E9%9D%A2LS%E7%AE%97%E6%B3%95%EF%BC%88Dijkstra%E7%AE%97%E6%B3%95%EF%BC%89%20%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%AE%9E%E7%8E%B0/"/>
      <url>/20210620/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20%E7%BD%91%E7%BB%9C%E5%B1%82%E6%8E%A7%E5%88%B6%E5%B9%B3%E9%9D%A2LS%E7%AE%97%E6%B3%95%EF%BC%88Dijkstra%E7%AE%97%E6%B3%95%EF%BC%89%20%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="comment">// 邻接表list&lt;pair&lt;int, int&gt;&gt; neighber  first是权值,second是节点序号</span></span><br><span class="line">    list&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; neighber;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">Dijkstra</span><span class="params">(<span class="keyword">const</span> vector&lt;Node&gt;&amp; graph, <span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 无穷距离</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="comment">// 一共有多少个节点</span></span><br><span class="line">    <span class="keyword">int</span> node_num = graph.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// 用来返回的距离表</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">distance_from_start</span><span class="params">(node_num, INF)</span></span>;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;&amp; dis = distance_from_start;</span><br><span class="line">    <span class="comment">// 已经得到了多少个节点的结果</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">is_checked</span><span class="params">(node_num, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> checked_num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    checked_num       = <span class="number">1</span>;</span><br><span class="line">    is_checked[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : graph[start].neighber) &#123;</span><br><span class="line">        dis[i.second] = i.first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环</span></span><br><span class="line">    <span class="keyword">while</span> (checked_num &lt; node_num) &#123;</span><br><span class="line">        <span class="keyword">int</span> node_to_check, min_dis = INF;</span><br><span class="line">        <span class="comment">// 找到了最小距离的点，也就是下一个确认的点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; node_num; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!is_checked[i] &amp;&amp; dis[i] &lt; min_dis) &#123;</span><br><span class="line">                node_to_check = i;</span><br><span class="line">                min_dis       = dis[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 加入已确认的集合</span></span><br><span class="line">        ++checked_num;</span><br><span class="line">        is_checked[node_to_check] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 更新node_to_check的邻居</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : graph[node_to_check].neighber) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!is_checked[i.second]) &#123;</span><br><span class="line">                dis[i.second] = std::<span class="built_in">min</span>(dis[node_to_check] + i.first, dis[i.second]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// Input</span></span><br><span class="line">    <span class="keyword">int</span> V, E;</span><br><span class="line">    cin &gt;&gt; V &gt;&gt; E;  <span class="comment">// 节点数和边数</span></span><br><span class="line">    <span class="function">vector&lt;Node&gt; <span class="title">graph</span><span class="params">(V)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> from, to, cost;  <span class="comment">// 起点，终点，权值</span></span><br><span class="line">        cin &gt;&gt; from &gt;&gt; to &gt;&gt; cost;</span><br><span class="line">        <span class="comment">// 无向图 from to等价</span></span><br><span class="line">        graph[from].neighber.<span class="built_in">push_back</span>(&#123;cost, to&#125;);</span><br><span class="line">        graph[to].neighber.<span class="built_in">push_back</span>(&#123;cost, from&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 测试代码</span></span><br><span class="line">    <span class="keyword">auto</span> dis = <span class="built_in">Dijkstra</span>(graph, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; V; i++)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;S到序号&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;顶点的最短距离:&quot;</span> &lt;&lt; dis[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文献：《计算机网络：自顶向下方法》中文版（原书第7版）P246伪代码</p>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>随机选择算法：以平均复杂度O(n)获取乱序序列中第K大的元素</title>
      <link href="/20210620/%E9%9A%8F%E6%9C%BA%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95%EF%BC%9A%E4%BB%A5%E5%B9%B3%E5%9D%87%E5%A4%8D%E6%9D%82%E5%BA%A6O(n)%E8%8E%B7%E5%8F%96%E4%B9%B1%E5%BA%8F%E5%BA%8F%E5%88%97%E4%B8%AD%E7%AC%ACK%E5%A4%A7%E7%9A%84%E5%85%83%E7%B4%A0/"/>
      <url>/20210620/%E9%9A%8F%E6%9C%BA%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95%EF%BC%9A%E4%BB%A5%E5%B9%B3%E5%9D%87%E5%A4%8D%E6%9D%82%E5%BA%A6O(n)%E8%8E%B7%E5%8F%96%E4%B9%B1%E5%BA%8F%E5%BA%8F%E5%88%97%E4%B8%AD%E7%AC%ACK%E5%A4%A7%E7%9A%84%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>非递归写法和递归写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RandPartition</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="built_in">round</span>(<span class="built_in">rand</span>() * <span class="number">1.0</span> / RAND_MAX * (right - left) + left);</span><br><span class="line">    std::<span class="built_in">swap</span>(nums[pos], nums[left]);</span><br><span class="line">    <span class="keyword">int</span> tmp = nums[left];</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] &gt;= tmp) --right;</span><br><span class="line">        std::<span class="built_in">swap</span>(nums[right], nums[left]);</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] &lt; tmp) ++left;</span><br><span class="line">        std::<span class="built_in">swap</span>(nums[right], nums[left]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RandSelectMaxK1</span><span class="params">(<span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> K)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 查找坐标在[left,right]闭区间内nums的第K大的元素</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">tmp</span><span class="params">(right - left + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); ++i) tmp[i] = nums[i + left];</span><br><span class="line">    <span class="comment">// new_left,new_right用来标识查找范围</span></span><br><span class="line">    <span class="keyword">int</span> new_left = <span class="number">0</span>, new_right = tmp.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="built_in">RandPartition</span>(tmp, new_left, new_right);</span><br><span class="line">    <span class="comment">// 找到了第M大的数字: tmp[pos]</span></span><br><span class="line">    <span class="keyword">int</span> M = pos + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (M != K) &#123;</span><br><span class="line">        <span class="keyword">if</span> (M &gt; K)</span><br><span class="line">            new_right = pos - <span class="number">1</span>, pos = <span class="built_in">RandPartition</span>(tmp, new_left, new_right), M = pos + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            new_left = pos + <span class="number">1</span>, pos = <span class="built_in">RandPartition</span>(tmp, new_left, new_right), M = pos + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp[pos];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RandSelectMaxK2Core</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> K)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RandSelectMaxK2</span><span class="params">(<span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> K)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 驱动例程，如果nums的值是可以改变的，可以不用这个函数</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; tmp = nums;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">RandSelectMaxK2Core</span>(tmp, left, right, K);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RandSelectMaxK2Core</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> K)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right) <span class="keyword">return</span> nums[left];</span><br><span class="line">    <span class="keyword">int</span> p = <span class="built_in">RandPartition</span>(nums, left, right);</span><br><span class="line">    <span class="keyword">int</span> M = p - left + <span class="number">1</span>;  <span class="comment">// p位置的元素nums[p]是nums在[left,right]中的第M大</span></span><br><span class="line">    <span class="keyword">if</span> (M == K) <span class="keyword">return</span> nums[p];</span><br><span class="line">    <span class="keyword">if</span> (K &lt; M)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">RandSelectMaxK2Core</span>(nums, left, p - <span class="number">1</span>, K);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">RandSelectMaxK2Core</span>(nums, p + <span class="number">1</span>, right, K - M);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">nums</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;nums = [&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) nums[i] = <span class="built_in">round</span>(<span class="built_in">rand</span>() * <span class="number">1.0</span> / RAND_MAX * <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : nums) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;nums的第[2,8]个元素中第3大的是：&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">RandSelectMaxK2</span>(nums, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>() + <span class="number">2</span>, nums.<span class="built_in">begin</span>() + <span class="number">8</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;[2,8]排好序的nums = [&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : nums) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>递归生成1~n的全排列</title>
      <link href="/20210620/%E9%80%92%E5%BD%92%E7%94%9F%E6%88%901~n%E7%9A%84%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>/20210620/%E9%80%92%E5%BD%92%E7%94%9F%E6%88%901~n%E7%9A%84%E5%85%A8%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="递归生成1-n的全排列"><a href="#递归生成1-n的全排列" class="headerlink" title="递归生成1~n的全排列"></a>递归生成1~n的全排列</h2><p>为了不污染全局作用域，把变量封装到了类里。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FullArangement</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FullArangement</span>(<span class="keyword">int</span> num)</span><br><span class="line">        : n&#123;num&#125;</span><br><span class="line">    &#123;</span><br><span class="line">        hash_table = vector&lt;<span class="keyword">bool</span>&gt;(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">        P          = vector&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GeneratrP</span><span class="params">(<span class="keyword">int</span> index = <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    vector&lt;<span class="keyword">bool</span>&gt; hash_table;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; P;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FullArangement::GeneratrP</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == n + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            cout &lt;&lt; P[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hash_table[x] == <span class="literal">false</span>) &#123;</span><br><span class="line">            P[index]      = x;</span><br><span class="line">            hash_table[x] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">GeneratrP</span>(index + <span class="number">1</span>);</span><br><span class="line">            hash_table[x] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">FullArangement</span>(n).<span class="built_in">GeneratrP</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高精度类：高精度类的加减法、高精度类与低精度的乘法和除法</title>
      <link href="/20210620/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%B1%BB%EF%BC%9A%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%B1%BB%E7%9A%84%E5%8A%A0%E5%87%8F%E6%B3%95%E3%80%81%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%B1%BB%E4%B8%8E%E4%BD%8E%E7%B2%BE%E5%BA%A6%E7%9A%84%E4%B9%98%E6%B3%95%E5%92%8C%E9%99%A4%E6%B3%95/"/>
      <url>/20210620/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%B1%BB%EF%BC%9A%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%B1%BB%E7%9A%84%E5%8A%A0%E5%87%8F%E6%B3%95%E3%80%81%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%B1%BB%E4%B8%8E%E4%BD%8E%E7%B2%BE%E5%BA%A6%E7%9A%84%E4%B9%98%E6%B3%95%E5%92%8C%E9%99%A4%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="高精度类的加减法、高精度类与低精度的乘法和除法"><a href="#高精度类的加减法、高精度类与低精度的乘法和除法" class="headerlink" title="高精度类的加减法、高精度类与低精度的乘法和除法"></a>高精度类的加减法、高精度类与低精度的乘法和除法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bign.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BigN</span> &#123;</span></span><br><span class="line">    <span class="comment">// 十进制base，倒序储存</span></span><br><span class="line">    <span class="comment">// 只能处理正数，负数要先判断再写入</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; d&#123;vector&lt;<span class="keyword">int</span>&gt;(<span class="number">1000</span>, <span class="number">0</span>)&#125;;</span><br><span class="line">    <span class="keyword">int</span> len&#123;<span class="number">0</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">BigN <span class="title">Change</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BigN a;</span><br><span class="line">    a.len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; ++i) &#123;</span><br><span class="line">        a.d[i] = str[a.len - <span class="number">1</span> - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Compare</span><span class="params">(<span class="keyword">const</span> BigN&amp; a, <span class="keyword">const</span> BigN&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// a大返回1，b大返回-1，相等返回0</span></span><br><span class="line">    <span class="keyword">if</span> (a.len &gt; b.len)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.len &lt; b.len)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 高位开始比较</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = a.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.d[i] &gt; b.d[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a.d[i] &lt; b.d[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">const</span> BigN&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a.d[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BigN <span class="title">Add</span><span class="params">(<span class="keyword">const</span> BigN&amp; a, <span class="keyword">const</span> BigN&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 高精度a+b，调用条件a、b均大于等于0</span></span><br><span class="line">    BigN ans;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len || i &lt; b.len; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp          = a.d[i] + b.d[i] + carry;</span><br><span class="line">        ans.d[ans.len++] = tmp % <span class="number">10</span>;</span><br><span class="line">        carry            = tmp / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry != <span class="number">0</span>) &#123;</span><br><span class="line">        ans.d[ans.len++] = carry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BigN <span class="title">Sub</span><span class="params">(BigN a, <span class="keyword">const</span> BigN&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 高精度a-b，调用条件a&gt;b</span></span><br><span class="line">    BigN ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len || i &lt; b.len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.d[i] &lt; b.d[i]) &#123;</span><br><span class="line">            <span class="comment">// 如果不够减</span></span><br><span class="line">            a.d[i + <span class="number">1</span>]--;</span><br><span class="line">            a.d[i] += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.d[ans.len++] = a.d[i] - b.d[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ans.len - <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; ans.d[ans.len - <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 去除高位的0并且最少保留一位</span></span><br><span class="line">        <span class="comment">// 保留一位是因为0也要被Print出来，如果0的len也是0，Print不会输出</span></span><br><span class="line">        ans.len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BigN <span class="title">Muilt</span><span class="params">(<span class="keyword">const</span> BigN&amp; a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 高精度和低精度的乘法</span></span><br><span class="line">    <span class="comment">// 调用条件a、b都是正数（不能为0）</span></span><br><span class="line">    BigN ans;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp          = a.d[i] * b + carry;</span><br><span class="line">        ans.d[ans.len++] = tmp % <span class="number">10</span>;</span><br><span class="line">        carry            = tmp / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (carry != <span class="number">0</span>) &#123;</span><br><span class="line">        ans.d[ans.len++] = carry % <span class="number">10</span>;</span><br><span class="line">        carry /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BigN <span class="title">Divide</span><span class="params">(<span class="keyword">const</span> BigN&amp; a, <span class="keyword">int</span> b, <span class="keyword">int</span>&amp; r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 高精度和低精度的除法,r为余数</span></span><br><span class="line">    <span class="comment">// 调用条件a、b都是正数</span></span><br><span class="line">    BigN ans;</span><br><span class="line">    ans.len = a.len, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + a.d[i];  <span class="comment">// 把余数和这一位的数字结合</span></span><br><span class="line">        <span class="keyword">if</span> (r &lt; b)</span><br><span class="line">            ans.d[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ans.d[i] = r / b;</span><br><span class="line">            r %= b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 去除高位0，如果最高位是0，那么len-1,同时保证len至少有1</span></span><br><span class="line">    <span class="keyword">while</span> (ans.len &gt; <span class="number">1</span> &amp;&amp; ans.d[ans.len - <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">        ans.len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与OJ </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
